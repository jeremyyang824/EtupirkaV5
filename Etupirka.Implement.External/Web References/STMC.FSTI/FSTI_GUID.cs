//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.33440。
// 
namespace Etupirka.Implement.External.STMC.FSTI {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FSTI_GUIDSoap", Namespace="http://FSTMGUID/")]
    public partial class FSTI_GUID : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IMTRByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback INVAByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICKByLot_IssueLJOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICKByLot_ReverseLJOperationCompleted;
        
        private System.Threading.SendOrPostCallback logonOperationCompleted;
        
        private System.Threading.SendOrPostCallback logonPoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback logoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_ChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_PlanParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_EditDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_DEPTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_REF4OperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_ADDTEXTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_DELTEXTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMB_DefLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMC_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMC_EDITOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMC_DELOperationCompleted;
        
        private System.Threading.SendOrPostCallback ITMC_AccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_ADDHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_ADDLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_ADDHeaderTEXTOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_DELHeaderTEXTOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_EditHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_EditLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_ADDLineTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback MOMT_DELLineTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_ADDHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_ADDLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_ADDPMLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_EditPMLineDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_EditLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_ADDLineTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_DelLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback POMT_EditHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback COMT_ADDHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback COMT_ADDLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback COMT_EditLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback COMT_ADDLineTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback COMT_DELLineTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback MORVROperationCompleted;
        
        private System.Threading.SendOrPostCallback MORVXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PORVROperationCompleted;
        
        private System.Threading.SendOrPostCallback PORVXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PORVR_PMOperationCompleted;
        
        private System.Threading.SendOrPostCallback PORVX_PMOperationCompleted;
        
        private System.Threading.SendOrPostCallback SHIPIOperationCompleted;
        
        private System.Threading.SendOrPostCallback SHIPXOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMTROperationCompleted;
        
        private System.Threading.SendOrPostCallback INVAOperationCompleted;
        
        private System.Threading.SendOrPostCallback BILL_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback BILL_EDITOperationCompleted;
        
        private System.Threading.SendOrPostCallback BILL_DELOperationCompleted;
        
        private System.Threading.SendOrPostCallback BILL_ADDTEXTOperationCompleted;
        
        private System.Threading.SendOrPostCallback BILL_DELTEXTOperationCompleted;
        
        private System.Threading.SendOrPostCallback TEXT_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TEXT_EDITOperationCompleted;
        
        private System.Threading.SendOrPostCallback TEXT_DELOperationCompleted;
        
        private System.Threading.SendOrPostCallback VEID_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback VEID_EDITOperationCompleted;
        
        private System.Threading.SendOrPostCallback VEID_EDITVATOperationCompleted;
        
        private System.Threading.SendOrPostCallback VEID_EDITDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback CUID_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CUID_EDITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CUID_EDITTaxCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMMT_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMMT_EDITOperationCompleted;
        
        private System.Threading.SendOrPostCallback LMMT_DELOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_ADDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_DELOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_EDITDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_IssueLJOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_IssueGSOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_ReverseGSOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_ReverseLJOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_ADDTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback PICK_DELTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GLOS_ADDHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GLOS_ADDChildOperationCompleted;
        
        private System.Threading.SendOrPostCallback PORVRByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback PORVXByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback MORVRByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback MORVXByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback SHIPIByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback SHIPXByLotOperationCompleted;
        
        /// <remarks/>
        public FSTI_GUID() {
            this.Url = "http://172.16.2.48/fstm/erppool.asmx";
        }
        
        /// <remarks/>
        public event IMTRByLotCompletedEventHandler IMTRByLotCompleted;
        
        /// <remarks/>
        public event INVAByLotCompletedEventHandler INVAByLotCompleted;
        
        /// <remarks/>
        public event PICKByLot_IssueLJCompletedEventHandler PICKByLot_IssueLJCompleted;
        
        /// <remarks/>
        public event PICKByLot_ReverseLJCompletedEventHandler PICKByLot_ReverseLJCompleted;
        
        /// <remarks/>
        public event logonCompletedEventHandler logonCompleted;
        
        /// <remarks/>
        public event logonPoolCompletedEventHandler logonPoolCompleted;
        
        /// <remarks/>
        public event logoutCompletedEventHandler logoutCompleted;
        
        /// <remarks/>
        public event ITMB_ADDCompletedEventHandler ITMB_ADDCompleted;
        
        /// <remarks/>
        public event ITMB_ChangeCompletedEventHandler ITMB_ChangeCompleted;
        
        /// <remarks/>
        public event ITMB_PlanParameterCompletedEventHandler ITMB_PlanParameterCompleted;
        
        /// <remarks/>
        public event ITMB_EditDetailCompletedEventHandler ITMB_EditDetailCompleted;
        
        /// <remarks/>
        public event ITMB_DEPTCompletedEventHandler ITMB_DEPTCompleted;
        
        /// <remarks/>
        public event ITMB_REF4CompletedEventHandler ITMB_REF4Completed;
        
        /// <remarks/>
        public event ITMB_ADDTEXTCompletedEventHandler ITMB_ADDTEXTCompleted;
        
        /// <remarks/>
        public event ITMB_DELTEXTCompletedEventHandler ITMB_DELTEXTCompleted;
        
        /// <remarks/>
        public event ITMB_DefLotCompletedEventHandler ITMB_DefLotCompleted;
        
        /// <remarks/>
        public event ITMC_ADDCompletedEventHandler ITMC_ADDCompleted;
        
        /// <remarks/>
        public event ITMC_EDITCompletedEventHandler ITMC_EDITCompleted;
        
        /// <remarks/>
        public event ITMC_DELCompletedEventHandler ITMC_DELCompleted;
        
        /// <remarks/>
        public event ITMC_AccountCompletedEventHandler ITMC_AccountCompleted;
        
        /// <remarks/>
        public event MOMT_ADDHeaderCompletedEventHandler MOMT_ADDHeaderCompleted;
        
        /// <remarks/>
        public event MOMT_ADDLineCompletedEventHandler MOMT_ADDLineCompleted;
        
        /// <remarks/>
        public event MOMT_ADDHeaderTEXTCompletedEventHandler MOMT_ADDHeaderTEXTCompleted;
        
        /// <remarks/>
        public event MOMT_DELHeaderTEXTCompletedEventHandler MOMT_DELHeaderTEXTCompleted;
        
        /// <remarks/>
        public event MOMT_EditHeaderCompletedEventHandler MOMT_EditHeaderCompleted;
        
        /// <remarks/>
        public event MOMT_EditLineCompletedEventHandler MOMT_EditLineCompleted;
        
        /// <remarks/>
        public event MOMT_ADDLineTextCompletedEventHandler MOMT_ADDLineTextCompleted;
        
        /// <remarks/>
        public event MOMT_DELLineTextCompletedEventHandler MOMT_DELLineTextCompleted;
        
        /// <remarks/>
        public event POMT_ADDHeaderCompletedEventHandler POMT_ADDHeaderCompleted;
        
        /// <remarks/>
        public event POMT_ADDLineCompletedEventHandler POMT_ADDLineCompleted;
        
        /// <remarks/>
        public event POMT_ADDPMLineCompletedEventHandler POMT_ADDPMLineCompleted;
        
        /// <remarks/>
        public event POMT_EditPMLineDetailCompletedEventHandler POMT_EditPMLineDetailCompleted;
        
        /// <remarks/>
        public event POMT_EditLineCompletedEventHandler POMT_EditLineCompleted;
        
        /// <remarks/>
        public event POMT_ADDLineTextCompletedEventHandler POMT_ADDLineTextCompleted;
        
        /// <remarks/>
        public event POMT_DelLineCompletedEventHandler POMT_DelLineCompleted;
        
        /// <remarks/>
        public event POMT_EditHeaderCompletedEventHandler POMT_EditHeaderCompleted;
        
        /// <remarks/>
        public event COMT_ADDHeaderCompletedEventHandler COMT_ADDHeaderCompleted;
        
        /// <remarks/>
        public event COMT_ADDLineCompletedEventHandler COMT_ADDLineCompleted;
        
        /// <remarks/>
        public event COMT_EditLineCompletedEventHandler COMT_EditLineCompleted;
        
        /// <remarks/>
        public event COMT_ADDLineTextCompletedEventHandler COMT_ADDLineTextCompleted;
        
        /// <remarks/>
        public event COMT_DELLineTextCompletedEventHandler COMT_DELLineTextCompleted;
        
        /// <remarks/>
        public event MORVRCompletedEventHandler MORVRCompleted;
        
        /// <remarks/>
        public event MORVXCompletedEventHandler MORVXCompleted;
        
        /// <remarks/>
        public event PORVRCompletedEventHandler PORVRCompleted;
        
        /// <remarks/>
        public event PORVXCompletedEventHandler PORVXCompleted;
        
        /// <remarks/>
        public event PORVR_PMCompletedEventHandler PORVR_PMCompleted;
        
        /// <remarks/>
        public event PORVX_PMCompletedEventHandler PORVX_PMCompleted;
        
        /// <remarks/>
        public event SHIPICompletedEventHandler SHIPICompleted;
        
        /// <remarks/>
        public event SHIPXCompletedEventHandler SHIPXCompleted;
        
        /// <remarks/>
        public event IMTRCompletedEventHandler IMTRCompleted;
        
        /// <remarks/>
        public event INVACompletedEventHandler INVACompleted;
        
        /// <remarks/>
        public event BILL_ADDCompletedEventHandler BILL_ADDCompleted;
        
        /// <remarks/>
        public event BILL_EDITCompletedEventHandler BILL_EDITCompleted;
        
        /// <remarks/>
        public event BILL_DELCompletedEventHandler BILL_DELCompleted;
        
        /// <remarks/>
        public event BILL_ADDTEXTCompletedEventHandler BILL_ADDTEXTCompleted;
        
        /// <remarks/>
        public event BILL_DELTEXTCompletedEventHandler BILL_DELTEXTCompleted;
        
        /// <remarks/>
        public event TEXT_ADDCompletedEventHandler TEXT_ADDCompleted;
        
        /// <remarks/>
        public event TEXT_EDITCompletedEventHandler TEXT_EDITCompleted;
        
        /// <remarks/>
        public event TEXT_DELCompletedEventHandler TEXT_DELCompleted;
        
        /// <remarks/>
        public event VEID_ADDCompletedEventHandler VEID_ADDCompleted;
        
        /// <remarks/>
        public event VEID_EDITCompletedEventHandler VEID_EDITCompleted;
        
        /// <remarks/>
        public event VEID_EDITVATCompletedEventHandler VEID_EDITVATCompleted;
        
        /// <remarks/>
        public event VEID_EDITDetailCompletedEventHandler VEID_EDITDetailCompleted;
        
        /// <remarks/>
        public event CUID_ADDCompletedEventHandler CUID_ADDCompleted;
        
        /// <remarks/>
        public event CUID_EDITCompletedEventHandler CUID_EDITCompleted;
        
        /// <remarks/>
        public event CUID_EDITTaxCodeCompletedEventHandler CUID_EDITTaxCodeCompleted;
        
        /// <remarks/>
        public event LMMT_ADDCompletedEventHandler LMMT_ADDCompleted;
        
        /// <remarks/>
        public event LMMT_EDITCompletedEventHandler LMMT_EDITCompleted;
        
        /// <remarks/>
        public event LMMT_DELCompletedEventHandler LMMT_DELCompleted;
        
        /// <remarks/>
        public event PICK_ADDCompletedEventHandler PICK_ADDCompleted;
        
        /// <remarks/>
        public event PICK_DELCompletedEventHandler PICK_DELCompleted;
        
        /// <remarks/>
        public event PICK_EDITDetailCompletedEventHandler PICK_EDITDetailCompleted;
        
        /// <remarks/>
        public event PICK_IssueLJCompletedEventHandler PICK_IssueLJCompleted;
        
        /// <remarks/>
        public event PICK_IssueGSCompletedEventHandler PICK_IssueGSCompleted;
        
        /// <remarks/>
        public event PICK_ReverseGSCompletedEventHandler PICK_ReverseGSCompleted;
        
        /// <remarks/>
        public event PICK_ReverseLJCompletedEventHandler PICK_ReverseLJCompleted;
        
        /// <remarks/>
        public event PICK_ADDTextCompletedEventHandler PICK_ADDTextCompleted;
        
        /// <remarks/>
        public event PICK_DELTextCompletedEventHandler PICK_DELTextCompleted;
        
        /// <remarks/>
        public event GLOS_ADDHeaderCompletedEventHandler GLOS_ADDHeaderCompleted;
        
        /// <remarks/>
        public event GLOS_ADDChildCompletedEventHandler GLOS_ADDChildCompleted;
        
        /// <remarks/>
        public event PORVRByLotCompletedEventHandler PORVRByLotCompleted;
        
        /// <remarks/>
        public event PORVXByLotCompletedEventHandler PORVXByLotCompleted;
        
        /// <remarks/>
        public event MORVRByLotCompletedEventHandler MORVRByLotCompleted;
        
        /// <remarks/>
        public event MORVXByLotCompletedEventHandler MORVXByLotCompleted;
        
        /// <remarks/>
        public event SHIPIByLotCompletedEventHandler SHIPIByLotCompleted;
        
        /// <remarks/>
        public event SHIPXByLotCompletedEventHandler SHIPXByLotCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/IMTRByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IMTRByLot(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string LotNumber, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber) {
            object[] results = this.Invoke("IMTRByLot", new object[] {
                        GUID,
                        ItemNumber,
                        StockroomFrom,
                        BinFrom,
                        InventoryCategoryFrom,
                        InventoryQuantity,
                        StockroomTo,
                        BinTo,
                        InventoryCategoryTo,
                        LotNumber,
                        OrderType,
                        OrderNumber,
                        LineNumber,
                        DocumentNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIMTRByLot(
                    string GUID, 
                    string ItemNumber, 
                    string StockroomFrom, 
                    string BinFrom, 
                    string InventoryCategoryFrom, 
                    string InventoryQuantity, 
                    string StockroomTo, 
                    string BinTo, 
                    string InventoryCategoryTo, 
                    string LotNumber, 
                    string OrderType, 
                    string OrderNumber, 
                    string LineNumber, 
                    string DocumentNumber, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("IMTRByLot", new object[] {
                        GUID,
                        ItemNumber,
                        StockroomFrom,
                        BinFrom,
                        InventoryCategoryFrom,
                        InventoryQuantity,
                        StockroomTo,
                        BinTo,
                        InventoryCategoryTo,
                        LotNumber,
                        OrderType,
                        OrderNumber,
                        LineNumber,
                        DocumentNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIMTRByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IMTRByLotAsync(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string LotNumber, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber) {
            this.IMTRByLotAsync(GUID, ItemNumber, StockroomFrom, BinFrom, InventoryCategoryFrom, InventoryQuantity, StockroomTo, BinTo, InventoryCategoryTo, LotNumber, OrderType, OrderNumber, LineNumber, DocumentNumber, null);
        }
        
        /// <remarks/>
        public void IMTRByLotAsync(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string LotNumber, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber, object userState) {
            if ((this.IMTRByLotOperationCompleted == null)) {
                this.IMTRByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMTRByLotOperationCompleted);
            }
            this.InvokeAsync("IMTRByLot", new object[] {
                        GUID,
                        ItemNumber,
                        StockroomFrom,
                        BinFrom,
                        InventoryCategoryFrom,
                        InventoryQuantity,
                        StockroomTo,
                        BinTo,
                        InventoryCategoryTo,
                        LotNumber,
                        OrderType,
                        OrderNumber,
                        LineNumber,
                        DocumentNumber}, this.IMTRByLotOperationCompleted, userState);
        }
        
        private void OnIMTRByLotOperationCompleted(object arg) {
            if ((this.IMTRByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMTRByLotCompleted(this, new IMTRByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/INVAByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string INVAByLot(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string Reason, string AdjustQuantity, string LotNumber, string DocumentNumber, string InventoryOffsetMasterAccountNumber) {
            object[] results = this.Invoke("INVAByLot", new object[] {
                        GUID,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ActionCode,
                        Reason,
                        AdjustQuantity,
                        LotNumber,
                        DocumentNumber,
                        InventoryOffsetMasterAccountNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginINVAByLot(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string Reason, string AdjustQuantity, string LotNumber, string DocumentNumber, string InventoryOffsetMasterAccountNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("INVAByLot", new object[] {
                        GUID,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ActionCode,
                        Reason,
                        AdjustQuantity,
                        LotNumber,
                        DocumentNumber,
                        InventoryOffsetMasterAccountNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndINVAByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void INVAByLotAsync(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string Reason, string AdjustQuantity, string LotNumber, string DocumentNumber, string InventoryOffsetMasterAccountNumber) {
            this.INVAByLotAsync(GUID, ItemNumber, Stockroom, Bin, InventoryCategory, ActionCode, Reason, AdjustQuantity, LotNumber, DocumentNumber, InventoryOffsetMasterAccountNumber, null);
        }
        
        /// <remarks/>
        public void INVAByLotAsync(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string Reason, string AdjustQuantity, string LotNumber, string DocumentNumber, string InventoryOffsetMasterAccountNumber, object userState) {
            if ((this.INVAByLotOperationCompleted == null)) {
                this.INVAByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnINVAByLotOperationCompleted);
            }
            this.InvokeAsync("INVAByLot", new object[] {
                        GUID,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ActionCode,
                        Reason,
                        AdjustQuantity,
                        LotNumber,
                        DocumentNumber,
                        InventoryOffsetMasterAccountNumber}, this.INVAByLotOperationCompleted, userState);
        }
        
        private void OnINVAByLotOperationCompleted(object arg) {
            if ((this.INVAByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.INVAByLotCompleted(this, new INVAByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICKByLot_IssueLJ", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICKByLot_IssueLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string IssuedQuantity, string LotNumber) {
            object[] results = this.Invoke("PICKByLot_IssueLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        Stockroom,
                        Bin,
                        IssuedQuantity,
                        LotNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICKByLot_IssueLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string IssuedQuantity, string LotNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICKByLot_IssueLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        Stockroom,
                        Bin,
                        IssuedQuantity,
                        LotNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICKByLot_IssueLJ(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICKByLot_IssueLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string IssuedQuantity, string LotNumber) {
            this.PICKByLot_IssueLJAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, Stockroom, Bin, IssuedQuantity, LotNumber, null);
        }
        
        /// <remarks/>
        public void PICKByLot_IssueLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string IssuedQuantity, string LotNumber, object userState) {
            if ((this.PICKByLot_IssueLJOperationCompleted == null)) {
                this.PICKByLot_IssueLJOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICKByLot_IssueLJOperationCompleted);
            }
            this.InvokeAsync("PICKByLot_IssueLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        Stockroom,
                        Bin,
                        IssuedQuantity,
                        LotNumber}, this.PICKByLot_IssueLJOperationCompleted, userState);
        }
        
        private void OnPICKByLot_IssueLJOperationCompleted(object arg) {
            if ((this.PICKByLot_IssueLJCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICKByLot_IssueLJCompleted(this, new PICKByLot_IssueLJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICKByLot_ReverseLJ", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICKByLot_ReverseLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string ReverseQuantity, string LotNumber) {
            object[] results = this.Invoke("PICKByLot_ReverseLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        Stockroom,
                        Bin,
                        ReverseQuantity,
                        LotNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICKByLot_ReverseLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string ReverseQuantity, string LotNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICKByLot_ReverseLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        Stockroom,
                        Bin,
                        ReverseQuantity,
                        LotNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICKByLot_ReverseLJ(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICKByLot_ReverseLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string ReverseQuantity, string LotNumber) {
            this.PICKByLot_ReverseLJAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, Stockroom, Bin, ReverseQuantity, LotNumber, null);
        }
        
        /// <remarks/>
        public void PICKByLot_ReverseLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string Stockroom, string Bin, string ReverseQuantity, string LotNumber, object userState) {
            if ((this.PICKByLot_ReverseLJOperationCompleted == null)) {
                this.PICKByLot_ReverseLJOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICKByLot_ReverseLJOperationCompleted);
            }
            this.InvokeAsync("PICKByLot_ReverseLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        Stockroom,
                        Bin,
                        ReverseQuantity,
                        LotNumber}, this.PICKByLot_ReverseLJOperationCompleted, userState);
        }
        
        private void OnPICKByLot_ReverseLJOperationCompleted(object arg) {
            if ((this.PICKByLot_ReverseLJCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICKByLot_ReverseLJCompleted(this, new PICKByLot_ReverseLJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/logon", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string logon(string userid, string pwd) {
            object[] results = this.Invoke("logon", new object[] {
                        userid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginlogon(string userid, string pwd, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("logon", new object[] {
                        userid,
                        pwd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string Endlogon(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logonAsync(string userid, string pwd) {
            this.logonAsync(userid, pwd, null);
        }
        
        /// <remarks/>
        public void logonAsync(string userid, string pwd, object userState) {
            if ((this.logonOperationCompleted == null)) {
                this.logonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogonOperationCompleted);
            }
            this.InvokeAsync("logon", new object[] {
                        userid,
                        pwd}, this.logonOperationCompleted, userState);
        }
        
        private void OnlogonOperationCompleted(object arg) {
            if ((this.logonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logonCompleted(this, new logonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/logonPool", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string logonPool(string GUID) {
            object[] results = this.Invoke("logonPool", new object[] {
                        GUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginlogonPool(string GUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("logonPool", new object[] {
                        GUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndlogonPool(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logonPoolAsync(string GUID) {
            this.logonPoolAsync(GUID, null);
        }
        
        /// <remarks/>
        public void logonPoolAsync(string GUID, object userState) {
            if ((this.logonPoolOperationCompleted == null)) {
                this.logonPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogonPoolOperationCompleted);
            }
            this.InvokeAsync("logonPool", new object[] {
                        GUID}, this.logonPoolOperationCompleted, userState);
        }
        
        private void OnlogonPoolOperationCompleted(object arg) {
            if ((this.logonPoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logonPoolCompleted(this, new logonPoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/logout", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string logout(string GUID) {
            object[] results = this.Invoke("logout", new object[] {
                        GUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginlogout(string GUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("logout", new object[] {
                        GUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string Endlogout(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logoutAsync(string GUID) {
            this.logoutAsync(GUID, null);
        }
        
        /// <remarks/>
        public void logoutAsync(string GUID, object userState) {
            if ((this.logoutOperationCompleted == null)) {
                this.logoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogoutOperationCompleted);
            }
            this.InvokeAsync("logout", new object[] {
                        GUID}, this.logoutOperationCompleted, userState);
        }
        
        private void OnlogoutOperationCompleted(object arg) {
            if ((this.logoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logoutCompleted(this, new logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_ADD(string GUID, string ItemNumber, string ItemDescription, string ItemUM, string MakeBuyCode, string ItemType) {
            object[] results = this.Invoke("ITMB_ADD", new object[] {
                        GUID,
                        ItemNumber,
                        ItemDescription,
                        ItemUM,
                        MakeBuyCode,
                        ItemType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_ADD(string GUID, string ItemNumber, string ItemDescription, string ItemUM, string MakeBuyCode, string ItemType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_ADD", new object[] {
                        GUID,
                        ItemNumber,
                        ItemDescription,
                        ItemUM,
                        MakeBuyCode,
                        ItemType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_ADDAsync(string GUID, string ItemNumber, string ItemDescription, string ItemUM, string MakeBuyCode, string ItemType) {
            this.ITMB_ADDAsync(GUID, ItemNumber, ItemDescription, ItemUM, MakeBuyCode, ItemType, null);
        }
        
        /// <remarks/>
        public void ITMB_ADDAsync(string GUID, string ItemNumber, string ItemDescription, string ItemUM, string MakeBuyCode, string ItemType, object userState) {
            if ((this.ITMB_ADDOperationCompleted == null)) {
                this.ITMB_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_ADDOperationCompleted);
            }
            this.InvokeAsync("ITMB_ADD", new object[] {
                        GUID,
                        ItemNumber,
                        ItemDescription,
                        ItemUM,
                        MakeBuyCode,
                        ItemType}, this.ITMB_ADDOperationCompleted, userState);
        }
        
        private void OnITMB_ADDOperationCompleted(object arg) {
            if ((this.ITMB_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_ADDCompleted(this, new ITMB_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_Change", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_Change(string GUID, string ItemNumber, string ItemDescription, string MakeBuyCode, string ItemStatus, string IsLotTraced) {
            object[] results = this.Invoke("ITMB_Change", new object[] {
                        GUID,
                        ItemNumber,
                        ItemDescription,
                        MakeBuyCode,
                        ItemStatus,
                        IsLotTraced});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_Change(string GUID, string ItemNumber, string ItemDescription, string MakeBuyCode, string ItemStatus, string IsLotTraced, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_Change", new object[] {
                        GUID,
                        ItemNumber,
                        ItemDescription,
                        MakeBuyCode,
                        ItemStatus,
                        IsLotTraced}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_Change(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_ChangeAsync(string GUID, string ItemNumber, string ItemDescription, string MakeBuyCode, string ItemStatus, string IsLotTraced) {
            this.ITMB_ChangeAsync(GUID, ItemNumber, ItemDescription, MakeBuyCode, ItemStatus, IsLotTraced, null);
        }
        
        /// <remarks/>
        public void ITMB_ChangeAsync(string GUID, string ItemNumber, string ItemDescription, string MakeBuyCode, string ItemStatus, string IsLotTraced, object userState) {
            if ((this.ITMB_ChangeOperationCompleted == null)) {
                this.ITMB_ChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_ChangeOperationCompleted);
            }
            this.InvokeAsync("ITMB_Change", new object[] {
                        GUID,
                        ItemNumber,
                        ItemDescription,
                        MakeBuyCode,
                        ItemStatus,
                        IsLotTraced}, this.ITMB_ChangeOperationCompleted, userState);
        }
        
        private void OnITMB_ChangeOperationCompleted(object arg) {
            if ((this.ITMB_ChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_ChangeCompleted(this, new ITMB_ChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_PlanParameter", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_PlanParameter(string GUID, string ItemNumber, string Planner, string Buyer, string RunLeadTimeDays, string FixedLeadTimeDays, string InspectionLeadTimeDays, string SafetyStockQuantity, string DecimalPrecision) {
            object[] results = this.Invoke("ITMB_PlanParameter", new object[] {
                        GUID,
                        ItemNumber,
                        Planner,
                        Buyer,
                        RunLeadTimeDays,
                        FixedLeadTimeDays,
                        InspectionLeadTimeDays,
                        SafetyStockQuantity,
                        DecimalPrecision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_PlanParameter(string GUID, string ItemNumber, string Planner, string Buyer, string RunLeadTimeDays, string FixedLeadTimeDays, string InspectionLeadTimeDays, string SafetyStockQuantity, string DecimalPrecision, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_PlanParameter", new object[] {
                        GUID,
                        ItemNumber,
                        Planner,
                        Buyer,
                        RunLeadTimeDays,
                        FixedLeadTimeDays,
                        InspectionLeadTimeDays,
                        SafetyStockQuantity,
                        DecimalPrecision}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_PlanParameter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_PlanParameterAsync(string GUID, string ItemNumber, string Planner, string Buyer, string RunLeadTimeDays, string FixedLeadTimeDays, string InspectionLeadTimeDays, string SafetyStockQuantity, string DecimalPrecision) {
            this.ITMB_PlanParameterAsync(GUID, ItemNumber, Planner, Buyer, RunLeadTimeDays, FixedLeadTimeDays, InspectionLeadTimeDays, SafetyStockQuantity, DecimalPrecision, null);
        }
        
        /// <remarks/>
        public void ITMB_PlanParameterAsync(string GUID, string ItemNumber, string Planner, string Buyer, string RunLeadTimeDays, string FixedLeadTimeDays, string InspectionLeadTimeDays, string SafetyStockQuantity, string DecimalPrecision, object userState) {
            if ((this.ITMB_PlanParameterOperationCompleted == null)) {
                this.ITMB_PlanParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_PlanParameterOperationCompleted);
            }
            this.InvokeAsync("ITMB_PlanParameter", new object[] {
                        GUID,
                        ItemNumber,
                        Planner,
                        Buyer,
                        RunLeadTimeDays,
                        FixedLeadTimeDays,
                        InspectionLeadTimeDays,
                        SafetyStockQuantity,
                        DecimalPrecision}, this.ITMB_PlanParameterOperationCompleted, userState);
        }
        
        private void OnITMB_PlanParameterOperationCompleted(object arg) {
            if ((this.ITMB_PlanParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_PlanParameterCompleted(this, new ITMB_PlanParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_EditDetail", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_EditDetail(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemClass2, string ItemClass3, string ItemReference2) {
            object[] results = this.Invoke("ITMB_EditDetail", new object[] {
                        GUID,
                        ItemNumber,
                        FamilySubgroup,
                        DrawingNumber,
                        ItemClass1,
                        ItemClass2,
                        ItemClass3,
                        ItemReference2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_EditDetail(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemClass2, string ItemClass3, string ItemReference2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_EditDetail", new object[] {
                        GUID,
                        ItemNumber,
                        FamilySubgroup,
                        DrawingNumber,
                        ItemClass1,
                        ItemClass2,
                        ItemClass3,
                        ItemReference2}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_EditDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_EditDetailAsync(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemClass2, string ItemClass3, string ItemReference2) {
            this.ITMB_EditDetailAsync(GUID, ItemNumber, FamilySubgroup, DrawingNumber, ItemClass1, ItemClass2, ItemClass3, ItemReference2, null);
        }
        
        /// <remarks/>
        public void ITMB_EditDetailAsync(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemClass2, string ItemClass3, string ItemReference2, object userState) {
            if ((this.ITMB_EditDetailOperationCompleted == null)) {
                this.ITMB_EditDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_EditDetailOperationCompleted);
            }
            this.InvokeAsync("ITMB_EditDetail", new object[] {
                        GUID,
                        ItemNumber,
                        FamilySubgroup,
                        DrawingNumber,
                        ItemClass1,
                        ItemClass2,
                        ItemClass3,
                        ItemReference2}, this.ITMB_EditDetailOperationCompleted, userState);
        }
        
        private void OnITMB_EditDetailOperationCompleted(object arg) {
            if ((this.ITMB_EditDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_EditDetailCompleted(this, new ITMB_EditDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_DEPT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_DEPT(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemReference2) {
            object[] results = this.Invoke("ITMB_DEPT", new object[] {
                        GUID,
                        ItemNumber,
                        FamilySubgroup,
                        DrawingNumber,
                        ItemClass1,
                        ItemReference2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_DEPT(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemReference2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_DEPT", new object[] {
                        GUID,
                        ItemNumber,
                        FamilySubgroup,
                        DrawingNumber,
                        ItemClass1,
                        ItemReference2}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_DEPT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_DEPTAsync(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemReference2) {
            this.ITMB_DEPTAsync(GUID, ItemNumber, FamilySubgroup, DrawingNumber, ItemClass1, ItemReference2, null);
        }
        
        /// <remarks/>
        public void ITMB_DEPTAsync(string GUID, string ItemNumber, string FamilySubgroup, string DrawingNumber, string ItemClass1, string ItemReference2, object userState) {
            if ((this.ITMB_DEPTOperationCompleted == null)) {
                this.ITMB_DEPTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_DEPTOperationCompleted);
            }
            this.InvokeAsync("ITMB_DEPT", new object[] {
                        GUID,
                        ItemNumber,
                        FamilySubgroup,
                        DrawingNumber,
                        ItemClass1,
                        ItemReference2}, this.ITMB_DEPTOperationCompleted, userState);
        }
        
        private void OnITMB_DEPTOperationCompleted(object arg) {
            if ((this.ITMB_DEPTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_DEPTCompleted(this, new ITMB_DEPTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_REF4", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_REF4(string GUID, string ItemNumber, string ItemReference4) {
            object[] results = this.Invoke("ITMB_REF4", new object[] {
                        GUID,
                        ItemNumber,
                        ItemReference4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_REF4(string GUID, string ItemNumber, string ItemReference4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_REF4", new object[] {
                        GUID,
                        ItemNumber,
                        ItemReference4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_REF4(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_REF4Async(string GUID, string ItemNumber, string ItemReference4) {
            this.ITMB_REF4Async(GUID, ItemNumber, ItemReference4, null);
        }
        
        /// <remarks/>
        public void ITMB_REF4Async(string GUID, string ItemNumber, string ItemReference4, object userState) {
            if ((this.ITMB_REF4OperationCompleted == null)) {
                this.ITMB_REF4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_REF4OperationCompleted);
            }
            this.InvokeAsync("ITMB_REF4", new object[] {
                        GUID,
                        ItemNumber,
                        ItemReference4}, this.ITMB_REF4OperationCompleted, userState);
        }
        
        private void OnITMB_REF4OperationCompleted(object arg) {
            if ((this.ITMB_REF4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_REF4Completed(this, new ITMB_REF4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_ADDTEXT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_ADDTEXT(string GUID, string ItemNumber, string HTS, string TextLine1, string TextLine2, string TextLine3, string TextLine4, string ItemReference2) {
            object[] results = this.Invoke("ITMB_ADDTEXT", new object[] {
                        GUID,
                        ItemNumber,
                        HTS,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4,
                        ItemReference2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_ADDTEXT(string GUID, string ItemNumber, string HTS, string TextLine1, string TextLine2, string TextLine3, string TextLine4, string ItemReference2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_ADDTEXT", new object[] {
                        GUID,
                        ItemNumber,
                        HTS,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4,
                        ItemReference2}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_ADDTEXT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_ADDTEXTAsync(string GUID, string ItemNumber, string HTS, string TextLine1, string TextLine2, string TextLine3, string TextLine4, string ItemReference2) {
            this.ITMB_ADDTEXTAsync(GUID, ItemNumber, HTS, TextLine1, TextLine2, TextLine3, TextLine4, ItemReference2, null);
        }
        
        /// <remarks/>
        public void ITMB_ADDTEXTAsync(string GUID, string ItemNumber, string HTS, string TextLine1, string TextLine2, string TextLine3, string TextLine4, string ItemReference2, object userState) {
            if ((this.ITMB_ADDTEXTOperationCompleted == null)) {
                this.ITMB_ADDTEXTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_ADDTEXTOperationCompleted);
            }
            this.InvokeAsync("ITMB_ADDTEXT", new object[] {
                        GUID,
                        ItemNumber,
                        HTS,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4,
                        ItemReference2}, this.ITMB_ADDTEXTOperationCompleted, userState);
        }
        
        private void OnITMB_ADDTEXTOperationCompleted(object arg) {
            if ((this.ITMB_ADDTEXTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_ADDTEXTCompleted(this, new ITMB_ADDTEXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_DELTEXT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_DELTEXT(string GUID, string ItemNumber) {
            object[] results = this.Invoke("ITMB_DELTEXT", new object[] {
                        GUID,
                        ItemNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_DELTEXT(string GUID, string ItemNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_DELTEXT", new object[] {
                        GUID,
                        ItemNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_DELTEXT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_DELTEXTAsync(string GUID, string ItemNumber) {
            this.ITMB_DELTEXTAsync(GUID, ItemNumber, null);
        }
        
        /// <remarks/>
        public void ITMB_DELTEXTAsync(string GUID, string ItemNumber, object userState) {
            if ((this.ITMB_DELTEXTOperationCompleted == null)) {
                this.ITMB_DELTEXTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_DELTEXTOperationCompleted);
            }
            this.InvokeAsync("ITMB_DELTEXT", new object[] {
                        GUID,
                        ItemNumber}, this.ITMB_DELTEXTOperationCompleted, userState);
        }
        
        private void OnITMB_DELTEXTOperationCompleted(object arg) {
            if ((this.ITMB_DELTEXTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_DELTEXTCompleted(this, new ITMB_DELTEXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMB_DefLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMB_DefLot(string GUID, string ItemNumber, string LotNumberAssignmentPolicy, string LotDefaultPolicy, string IsLotTraceItemFIFO, string BackflushPolicy, string LotNumberMask, string LastUsedLotCounter) {
            object[] results = this.Invoke("ITMB_DefLot", new object[] {
                        GUID,
                        ItemNumber,
                        LotNumberAssignmentPolicy,
                        LotDefaultPolicy,
                        IsLotTraceItemFIFO,
                        BackflushPolicy,
                        LotNumberMask,
                        LastUsedLotCounter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMB_DefLot(string GUID, string ItemNumber, string LotNumberAssignmentPolicy, string LotDefaultPolicy, string IsLotTraceItemFIFO, string BackflushPolicy, string LotNumberMask, string LastUsedLotCounter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMB_DefLot", new object[] {
                        GUID,
                        ItemNumber,
                        LotNumberAssignmentPolicy,
                        LotDefaultPolicy,
                        IsLotTraceItemFIFO,
                        BackflushPolicy,
                        LotNumberMask,
                        LastUsedLotCounter}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMB_DefLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMB_DefLotAsync(string GUID, string ItemNumber, string LotNumberAssignmentPolicy, string LotDefaultPolicy, string IsLotTraceItemFIFO, string BackflushPolicy, string LotNumberMask, string LastUsedLotCounter) {
            this.ITMB_DefLotAsync(GUID, ItemNumber, LotNumberAssignmentPolicy, LotDefaultPolicy, IsLotTraceItemFIFO, BackflushPolicy, LotNumberMask, LastUsedLotCounter, null);
        }
        
        /// <remarks/>
        public void ITMB_DefLotAsync(string GUID, string ItemNumber, string LotNumberAssignmentPolicy, string LotDefaultPolicy, string IsLotTraceItemFIFO, string BackflushPolicy, string LotNumberMask, string LastUsedLotCounter, object userState) {
            if ((this.ITMB_DefLotOperationCompleted == null)) {
                this.ITMB_DefLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMB_DefLotOperationCompleted);
            }
            this.InvokeAsync("ITMB_DefLot", new object[] {
                        GUID,
                        ItemNumber,
                        LotNumberAssignmentPolicy,
                        LotDefaultPolicy,
                        IsLotTraceItemFIFO,
                        BackflushPolicy,
                        LotNumberMask,
                        LastUsedLotCounter}, this.ITMB_DefLotOperationCompleted, userState);
        }
        
        private void OnITMB_DefLotOperationCompleted(object arg) {
            if ((this.ITMB_DefLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMB_DefLotCompleted(this, new ITMB_DefLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMC_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMC_ADD(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost) {
            object[] results = this.Invoke("ITMC_ADD", new object[] {
                        GUID,
                        ItemNumber,
                        CostType,
                        CostCode,
                        AtThisLevelMaterialCost,
                        AtThisLevelLaborCost,
                        AtThisLevelVariableOverheadCost,
                        AtThisLevelFixedOverheadCost,
                        RolledMaterialCost,
                        RolledLaborCost,
                        RolledVariableOverheadCost,
                        RolledFixedOverheadCost});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMC_ADD(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMC_ADD", new object[] {
                        GUID,
                        ItemNumber,
                        CostType,
                        CostCode,
                        AtThisLevelMaterialCost,
                        AtThisLevelLaborCost,
                        AtThisLevelVariableOverheadCost,
                        AtThisLevelFixedOverheadCost,
                        RolledMaterialCost,
                        RolledLaborCost,
                        RolledVariableOverheadCost,
                        RolledFixedOverheadCost}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMC_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMC_ADDAsync(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost) {
            this.ITMC_ADDAsync(GUID, ItemNumber, CostType, CostCode, AtThisLevelMaterialCost, AtThisLevelLaborCost, AtThisLevelVariableOverheadCost, AtThisLevelFixedOverheadCost, RolledMaterialCost, RolledLaborCost, RolledVariableOverheadCost, RolledFixedOverheadCost, null);
        }
        
        /// <remarks/>
        public void ITMC_ADDAsync(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost, object userState) {
            if ((this.ITMC_ADDOperationCompleted == null)) {
                this.ITMC_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMC_ADDOperationCompleted);
            }
            this.InvokeAsync("ITMC_ADD", new object[] {
                        GUID,
                        ItemNumber,
                        CostType,
                        CostCode,
                        AtThisLevelMaterialCost,
                        AtThisLevelLaborCost,
                        AtThisLevelVariableOverheadCost,
                        AtThisLevelFixedOverheadCost,
                        RolledMaterialCost,
                        RolledLaborCost,
                        RolledVariableOverheadCost,
                        RolledFixedOverheadCost}, this.ITMC_ADDOperationCompleted, userState);
        }
        
        private void OnITMC_ADDOperationCompleted(object arg) {
            if ((this.ITMC_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMC_ADDCompleted(this, new ITMC_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMC_EDIT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMC_EDIT(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost) {
            object[] results = this.Invoke("ITMC_EDIT", new object[] {
                        GUID,
                        ItemNumber,
                        CostType,
                        CostCode,
                        AtThisLevelMaterialCost,
                        AtThisLevelLaborCost,
                        AtThisLevelVariableOverheadCost,
                        AtThisLevelFixedOverheadCost,
                        RolledMaterialCost,
                        RolledLaborCost,
                        RolledVariableOverheadCost,
                        RolledFixedOverheadCost});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMC_EDIT(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMC_EDIT", new object[] {
                        GUID,
                        ItemNumber,
                        CostType,
                        CostCode,
                        AtThisLevelMaterialCost,
                        AtThisLevelLaborCost,
                        AtThisLevelVariableOverheadCost,
                        AtThisLevelFixedOverheadCost,
                        RolledMaterialCost,
                        RolledLaborCost,
                        RolledVariableOverheadCost,
                        RolledFixedOverheadCost}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMC_EDIT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMC_EDITAsync(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost) {
            this.ITMC_EDITAsync(GUID, ItemNumber, CostType, CostCode, AtThisLevelMaterialCost, AtThisLevelLaborCost, AtThisLevelVariableOverheadCost, AtThisLevelFixedOverheadCost, RolledMaterialCost, RolledLaborCost, RolledVariableOverheadCost, RolledFixedOverheadCost, null);
        }
        
        /// <remarks/>
        public void ITMC_EDITAsync(string GUID, string ItemNumber, string CostType, string CostCode, string AtThisLevelMaterialCost, string AtThisLevelLaborCost, string AtThisLevelVariableOverheadCost, string AtThisLevelFixedOverheadCost, string RolledMaterialCost, string RolledLaborCost, string RolledVariableOverheadCost, string RolledFixedOverheadCost, object userState) {
            if ((this.ITMC_EDITOperationCompleted == null)) {
                this.ITMC_EDITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMC_EDITOperationCompleted);
            }
            this.InvokeAsync("ITMC_EDIT", new object[] {
                        GUID,
                        ItemNumber,
                        CostType,
                        CostCode,
                        AtThisLevelMaterialCost,
                        AtThisLevelLaborCost,
                        AtThisLevelVariableOverheadCost,
                        AtThisLevelFixedOverheadCost,
                        RolledMaterialCost,
                        RolledLaborCost,
                        RolledVariableOverheadCost,
                        RolledFixedOverheadCost}, this.ITMC_EDITOperationCompleted, userState);
        }
        
        private void OnITMC_EDITOperationCompleted(object arg) {
            if ((this.ITMC_EDITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMC_EDITCompleted(this, new ITMC_EDITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMC_DEL", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMC_DEL(string GUID, string ItemNumber, string CostType) {
            object[] results = this.Invoke("ITMC_DEL", new object[] {
                        GUID,
                        ItemNumber,
                        CostType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMC_DEL(string GUID, string ItemNumber, string CostType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMC_DEL", new object[] {
                        GUID,
                        ItemNumber,
                        CostType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMC_DEL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMC_DELAsync(string GUID, string ItemNumber, string CostType) {
            this.ITMC_DELAsync(GUID, ItemNumber, CostType, null);
        }
        
        /// <remarks/>
        public void ITMC_DELAsync(string GUID, string ItemNumber, string CostType, object userState) {
            if ((this.ITMC_DELOperationCompleted == null)) {
                this.ITMC_DELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMC_DELOperationCompleted);
            }
            this.InvokeAsync("ITMC_DEL", new object[] {
                        GUID,
                        ItemNumber,
                        CostType}, this.ITMC_DELOperationCompleted, userState);
        }
        
        private void OnITMC_DELOperationCompleted(object arg) {
            if ((this.ITMC_DELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMC_DELCompleted(this, new ITMC_DELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/ITMC_Account", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ITMC_Account(string GUID, string ItemNumber, string InventoryAccount, string ProductLine) {
            object[] results = this.Invoke("ITMC_Account", new object[] {
                        GUID,
                        ItemNumber,
                        InventoryAccount,
                        ProductLine});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginITMC_Account(string GUID, string ItemNumber, string InventoryAccount, string ProductLine, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ITMC_Account", new object[] {
                        GUID,
                        ItemNumber,
                        InventoryAccount,
                        ProductLine}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndITMC_Account(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ITMC_AccountAsync(string GUID, string ItemNumber, string InventoryAccount, string ProductLine) {
            this.ITMC_AccountAsync(GUID, ItemNumber, InventoryAccount, ProductLine, null);
        }
        
        /// <remarks/>
        public void ITMC_AccountAsync(string GUID, string ItemNumber, string InventoryAccount, string ProductLine, object userState) {
            if ((this.ITMC_AccountOperationCompleted == null)) {
                this.ITMC_AccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnITMC_AccountOperationCompleted);
            }
            this.InvokeAsync("ITMC_Account", new object[] {
                        GUID,
                        ItemNumber,
                        InventoryAccount,
                        ProductLine}, this.ITMC_AccountOperationCompleted, userState);
        }
        
        private void OnITMC_AccountOperationCompleted(object arg) {
            if ((this.ITMC_AccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ITMC_AccountCompleted(this, new ITMC_AccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_ADDHeader", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_ADDHeader(string GUID, string MONumber, string Planner, string WorkCenter, string DeliverTo) {
            object[] results = this.Invoke("MOMT_ADDHeader", new object[] {
                        GUID,
                        MONumber,
                        Planner,
                        WorkCenter,
                        DeliverTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_ADDHeader(string GUID, string MONumber, string Planner, string WorkCenter, string DeliverTo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_ADDHeader", new object[] {
                        GUID,
                        MONumber,
                        Planner,
                        WorkCenter,
                        DeliverTo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_ADDHeader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_ADDHeaderAsync(string GUID, string MONumber, string Planner, string WorkCenter, string DeliverTo) {
            this.MOMT_ADDHeaderAsync(GUID, MONumber, Planner, WorkCenter, DeliverTo, null);
        }
        
        /// <remarks/>
        public void MOMT_ADDHeaderAsync(string GUID, string MONumber, string Planner, string WorkCenter, string DeliverTo, object userState) {
            if ((this.MOMT_ADDHeaderOperationCompleted == null)) {
                this.MOMT_ADDHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_ADDHeaderOperationCompleted);
            }
            this.InvokeAsync("MOMT_ADDHeader", new object[] {
                        GUID,
                        MONumber,
                        Planner,
                        WorkCenter,
                        DeliverTo}, this.MOMT_ADDHeaderOperationCompleted, userState);
        }
        
        private void OnMOMT_ADDHeaderOperationCompleted(object arg) {
            if ((this.MOMT_ADDHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_ADDHeaderCompleted(this, new MOMT_ADDHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_ADDLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_ADDLine(string GUID, string MONumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate) {
            object[] results = this.Invoke("MOMT_ADDLine", new object[] {
                        GUID,
                        MONumber,
                        ItemNumber,
                        MOLineType,
                        ItemOrderedQuantity,
                        MOLineStatus,
                        StartDate,
                        ScheduledDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_ADDLine(string GUID, string MONumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_ADDLine", new object[] {
                        GUID,
                        MONumber,
                        ItemNumber,
                        MOLineType,
                        ItemOrderedQuantity,
                        MOLineStatus,
                        StartDate,
                        ScheduledDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_ADDLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_ADDLineAsync(string GUID, string MONumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate) {
            this.MOMT_ADDLineAsync(GUID, MONumber, ItemNumber, MOLineType, ItemOrderedQuantity, MOLineStatus, StartDate, ScheduledDate, null);
        }
        
        /// <remarks/>
        public void MOMT_ADDLineAsync(string GUID, string MONumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate, object userState) {
            if ((this.MOMT_ADDLineOperationCompleted == null)) {
                this.MOMT_ADDLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_ADDLineOperationCompleted);
            }
            this.InvokeAsync("MOMT_ADDLine", new object[] {
                        GUID,
                        MONumber,
                        ItemNumber,
                        MOLineType,
                        ItemOrderedQuantity,
                        MOLineStatus,
                        StartDate,
                        ScheduledDate}, this.MOMT_ADDLineOperationCompleted, userState);
        }
        
        private void OnMOMT_ADDLineOperationCompleted(object arg) {
            if ((this.MOMT_ADDLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_ADDLineCompleted(this, new MOMT_ADDLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_ADDHeaderTEXT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_ADDHeaderTEXT(string GUID, string MONumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("MOMT_ADDHeaderTEXT", new object[] {
                        GUID,
                        MONumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_ADDHeaderTEXT(string GUID, string MONumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_ADDHeaderTEXT", new object[] {
                        GUID,
                        MONumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_ADDHeaderTEXT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_ADDHeaderTEXTAsync(string GUID, string MONumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.MOMT_ADDHeaderTEXTAsync(GUID, MONumber, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void MOMT_ADDHeaderTEXTAsync(string GUID, string MONumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.MOMT_ADDHeaderTEXTOperationCompleted == null)) {
                this.MOMT_ADDHeaderTEXTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_ADDHeaderTEXTOperationCompleted);
            }
            this.InvokeAsync("MOMT_ADDHeaderTEXT", new object[] {
                        GUID,
                        MONumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.MOMT_ADDHeaderTEXTOperationCompleted, userState);
        }
        
        private void OnMOMT_ADDHeaderTEXTOperationCompleted(object arg) {
            if ((this.MOMT_ADDHeaderTEXTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_ADDHeaderTEXTCompleted(this, new MOMT_ADDHeaderTEXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_DELHeaderTEXT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_DELHeaderTEXT(string GUID, string MONumber) {
            object[] results = this.Invoke("MOMT_DELHeaderTEXT", new object[] {
                        GUID,
                        MONumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_DELHeaderTEXT(string GUID, string MONumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_DELHeaderTEXT", new object[] {
                        GUID,
                        MONumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_DELHeaderTEXT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_DELHeaderTEXTAsync(string GUID, string MONumber) {
            this.MOMT_DELHeaderTEXTAsync(GUID, MONumber, null);
        }
        
        /// <remarks/>
        public void MOMT_DELHeaderTEXTAsync(string GUID, string MONumber, object userState) {
            if ((this.MOMT_DELHeaderTEXTOperationCompleted == null)) {
                this.MOMT_DELHeaderTEXTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_DELHeaderTEXTOperationCompleted);
            }
            this.InvokeAsync("MOMT_DELHeaderTEXT", new object[] {
                        GUID,
                        MONumber}, this.MOMT_DELHeaderTEXTOperationCompleted, userState);
        }
        
        private void OnMOMT_DELHeaderTEXTOperationCompleted(object arg) {
            if ((this.MOMT_DELHeaderTEXTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_DELHeaderTEXTCompleted(this, new MOMT_DELHeaderTEXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_EditHeader", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_EditHeader(string GUID, string MONumber, string WorkCenter, string DeliverTo) {
            object[] results = this.Invoke("MOMT_EditHeader", new object[] {
                        GUID,
                        MONumber,
                        WorkCenter,
                        DeliverTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_EditHeader(string GUID, string MONumber, string WorkCenter, string DeliverTo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_EditHeader", new object[] {
                        GUID,
                        MONumber,
                        WorkCenter,
                        DeliverTo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_EditHeader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_EditHeaderAsync(string GUID, string MONumber, string WorkCenter, string DeliverTo) {
            this.MOMT_EditHeaderAsync(GUID, MONumber, WorkCenter, DeliverTo, null);
        }
        
        /// <remarks/>
        public void MOMT_EditHeaderAsync(string GUID, string MONumber, string WorkCenter, string DeliverTo, object userState) {
            if ((this.MOMT_EditHeaderOperationCompleted == null)) {
                this.MOMT_EditHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_EditHeaderOperationCompleted);
            }
            this.InvokeAsync("MOMT_EditHeader", new object[] {
                        GUID,
                        MONumber,
                        WorkCenter,
                        DeliverTo}, this.MOMT_EditHeaderOperationCompleted, userState);
        }
        
        private void OnMOMT_EditHeaderOperationCompleted(object arg) {
            if ((this.MOMT_EditHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_EditHeaderCompleted(this, new MOMT_EditHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_EditLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_EditLine(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate) {
            object[] results = this.Invoke("MOMT_EditLine", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType,
                        ItemOrderedQuantity,
                        MOLineStatus,
                        StartDate,
                        ScheduledDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_EditLine(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_EditLine", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType,
                        ItemOrderedQuantity,
                        MOLineStatus,
                        StartDate,
                        ScheduledDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_EditLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_EditLineAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate) {
            this.MOMT_EditLineAsync(GUID, MONumber, MOLineNumber, ItemNumber, MOLineType, ItemOrderedQuantity, MOLineStatus, StartDate, ScheduledDate, null);
        }
        
        /// <remarks/>
        public void MOMT_EditLineAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string ItemOrderedQuantity, string MOLineStatus, string StartDate, string ScheduledDate, object userState) {
            if ((this.MOMT_EditLineOperationCompleted == null)) {
                this.MOMT_EditLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_EditLineOperationCompleted);
            }
            this.InvokeAsync("MOMT_EditLine", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType,
                        ItemOrderedQuantity,
                        MOLineStatus,
                        StartDate,
                        ScheduledDate}, this.MOMT_EditLineOperationCompleted, userState);
        }
        
        private void OnMOMT_EditLineOperationCompleted(object arg) {
            if ((this.MOMT_EditLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_EditLineCompleted(this, new MOMT_EditLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_ADDLineText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_ADDLineText(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("MOMT_ADDLineText", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_ADDLineText(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_ADDLineText", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_ADDLineText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_ADDLineTextAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.MOMT_ADDLineTextAsync(GUID, MONumber, MOLineNumber, ItemNumber, MOLineType, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void MOMT_ADDLineTextAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.MOMT_ADDLineTextOperationCompleted == null)) {
                this.MOMT_ADDLineTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_ADDLineTextOperationCompleted);
            }
            this.InvokeAsync("MOMT_ADDLineText", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.MOMT_ADDLineTextOperationCompleted, userState);
        }
        
        private void OnMOMT_ADDLineTextOperationCompleted(object arg) {
            if ((this.MOMT_ADDLineTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_ADDLineTextCompleted(this, new MOMT_ADDLineTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MOMT_DELLineText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOMT_DELLineText(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType) {
            object[] results = this.Invoke("MOMT_DELLineText", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMOMT_DELLineText(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MOMT_DELLineText", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMOMT_DELLineText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOMT_DELLineTextAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType) {
            this.MOMT_DELLineTextAsync(GUID, MONumber, MOLineNumber, ItemNumber, MOLineType, null);
        }
        
        /// <remarks/>
        public void MOMT_DELLineTextAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string MOLineType, object userState) {
            if ((this.MOMT_DELLineTextOperationCompleted == null)) {
                this.MOMT_DELLineTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOMT_DELLineTextOperationCompleted);
            }
            this.InvokeAsync("MOMT_DELLineText", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        MOLineType}, this.MOMT_DELLineTextOperationCompleted, userState);
        }
        
        private void OnMOMT_DELLineTextOperationCompleted(object arg) {
            if ((this.MOMT_DELLineTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOMT_DELLineTextCompleted(this, new MOMT_DELLineTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_ADDHeader", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_ADDHeader(string GUID, string PONumber, string VendorID, string Buyer, string POReference) {
            object[] results = this.Invoke("POMT_ADDHeader", new object[] {
                        GUID,
                        PONumber,
                        VendorID,
                        Buyer,
                        POReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_ADDHeader(string GUID, string PONumber, string VendorID, string Buyer, string POReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_ADDHeader", new object[] {
                        GUID,
                        PONumber,
                        VendorID,
                        Buyer,
                        POReference}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_ADDHeader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_ADDHeaderAsync(string GUID, string PONumber, string VendorID, string Buyer, string POReference) {
            this.POMT_ADDHeaderAsync(GUID, PONumber, VendorID, Buyer, POReference, null);
        }
        
        /// <remarks/>
        public void POMT_ADDHeaderAsync(string GUID, string PONumber, string VendorID, string Buyer, string POReference, object userState) {
            if ((this.POMT_ADDHeaderOperationCompleted == null)) {
                this.POMT_ADDHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_ADDHeaderOperationCompleted);
            }
            this.InvokeAsync("POMT_ADDHeader", new object[] {
                        GUID,
                        PONumber,
                        VendorID,
                        Buyer,
                        POReference}, this.POMT_ADDHeaderOperationCompleted, userState);
        }
        
        private void OnPOMT_ADDHeaderOperationCompleted(object arg) {
            if ((this.POMT_ADDHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_ADDHeaderCompleted(this, new POMT_ADDHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_ADDLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_ADDLine(string GUID, string PONumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string POLineType, string ItemUnitCost) {
            object[] results = this.Invoke("POMT_ADDLine", new object[] {
                        GUID,
                        PONumber,
                        ItemNumber,
                        LineItemOrderedQuantity,
                        PromisedDate,
                        POLineStatus,
                        POLineType,
                        ItemUnitCost});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_ADDLine(string GUID, string PONumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string POLineType, string ItemUnitCost, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_ADDLine", new object[] {
                        GUID,
                        PONumber,
                        ItemNumber,
                        LineItemOrderedQuantity,
                        PromisedDate,
                        POLineStatus,
                        POLineType,
                        ItemUnitCost}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_ADDLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_ADDLineAsync(string GUID, string PONumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string POLineType, string ItemUnitCost) {
            this.POMT_ADDLineAsync(GUID, PONumber, ItemNumber, LineItemOrderedQuantity, PromisedDate, POLineStatus, POLineType, ItemUnitCost, null);
        }
        
        /// <remarks/>
        public void POMT_ADDLineAsync(string GUID, string PONumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string POLineType, string ItemUnitCost, object userState) {
            if ((this.POMT_ADDLineOperationCompleted == null)) {
                this.POMT_ADDLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_ADDLineOperationCompleted);
            }
            this.InvokeAsync("POMT_ADDLine", new object[] {
                        GUID,
                        PONumber,
                        ItemNumber,
                        LineItemOrderedQuantity,
                        PromisedDate,
                        POLineStatus,
                        POLineType,
                        ItemUnitCost}, this.POMT_ADDLineOperationCompleted, userState);
        }
        
        private void OnPOMT_ADDLineOperationCompleted(object arg) {
            if ((this.POMT_ADDLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_ADDLineCompleted(this, new POMT_ADDLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_ADDPMLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_ADDPMLine(string GUID, string PONumber, string MONumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string ItemUnitCost) {
            object[] results = this.Invoke("POMT_ADDPMLine", new object[] {
                        GUID,
                        PONumber,
                        MONumber,
                        LineItemOrderedQuantity,
                        PromisedDate,
                        POLineStatus,
                        ItemUnitCost});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_ADDPMLine(string GUID, string PONumber, string MONumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string ItemUnitCost, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_ADDPMLine", new object[] {
                        GUID,
                        PONumber,
                        MONumber,
                        LineItemOrderedQuantity,
                        PromisedDate,
                        POLineStatus,
                        ItemUnitCost}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_ADDPMLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_ADDPMLineAsync(string GUID, string PONumber, string MONumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string ItemUnitCost) {
            this.POMT_ADDPMLineAsync(GUID, PONumber, MONumber, LineItemOrderedQuantity, PromisedDate, POLineStatus, ItemUnitCost, null);
        }
        
        /// <remarks/>
        public void POMT_ADDPMLineAsync(string GUID, string PONumber, string MONumber, string LineItemOrderedQuantity, string PromisedDate, string POLineStatus, string ItemUnitCost, object userState) {
            if ((this.POMT_ADDPMLineOperationCompleted == null)) {
                this.POMT_ADDPMLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_ADDPMLineOperationCompleted);
            }
            this.InvokeAsync("POMT_ADDPMLine", new object[] {
                        GUID,
                        PONumber,
                        MONumber,
                        LineItemOrderedQuantity,
                        PromisedDate,
                        POLineStatus,
                        ItemUnitCost}, this.POMT_ADDPMLineOperationCompleted, userState);
        }
        
        private void OnPOMT_ADDPMLineOperationCompleted(object arg) {
            if ((this.POMT_ADDPMLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_ADDPMLineCompleted(this, new POMT_ADDPMLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_EditPMLineDetail", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_EditPMLineDetail(string GUID, string PONumber, string POLineNumber, string MONumber, string MOLineNumber, string OperationSequenceNumber, string PromisedDate) {
            object[] results = this.Invoke("POMT_EditPMLineDetail", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        MONumber,
                        MOLineNumber,
                        OperationSequenceNumber,
                        PromisedDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_EditPMLineDetail(string GUID, string PONumber, string POLineNumber, string MONumber, string MOLineNumber, string OperationSequenceNumber, string PromisedDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_EditPMLineDetail", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        MONumber,
                        MOLineNumber,
                        OperationSequenceNumber,
                        PromisedDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_EditPMLineDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_EditPMLineDetailAsync(string GUID, string PONumber, string POLineNumber, string MONumber, string MOLineNumber, string OperationSequenceNumber, string PromisedDate) {
            this.POMT_EditPMLineDetailAsync(GUID, PONumber, POLineNumber, MONumber, MOLineNumber, OperationSequenceNumber, PromisedDate, null);
        }
        
        /// <remarks/>
        public void POMT_EditPMLineDetailAsync(string GUID, string PONumber, string POLineNumber, string MONumber, string MOLineNumber, string OperationSequenceNumber, string PromisedDate, object userState) {
            if ((this.POMT_EditPMLineDetailOperationCompleted == null)) {
                this.POMT_EditPMLineDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_EditPMLineDetailOperationCompleted);
            }
            this.InvokeAsync("POMT_EditPMLineDetail", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        MONumber,
                        MOLineNumber,
                        OperationSequenceNumber,
                        PromisedDate}, this.POMT_EditPMLineDetailOperationCompleted, userState);
        }
        
        private void OnPOMT_EditPMLineDetailOperationCompleted(object arg) {
            if ((this.POMT_EditPMLineDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_EditPMLineDetailCompleted(this, new POMT_EditPMLineDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_EditLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_EditLine(string GUID, string PONumber, string POLineNumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDateOld, string PromisedDate, string POLineStatus, string ItemUnitCost) {
            object[] results = this.Invoke("POMT_EditLine", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        LineItemOrderedQuantity,
                        PromisedDateOld,
                        PromisedDate,
                        POLineStatus,
                        ItemUnitCost});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_EditLine(string GUID, string PONumber, string POLineNumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDateOld, string PromisedDate, string POLineStatus, string ItemUnitCost, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_EditLine", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        LineItemOrderedQuantity,
                        PromisedDateOld,
                        PromisedDate,
                        POLineStatus,
                        ItemUnitCost}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_EditLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_EditLineAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDateOld, string PromisedDate, string POLineStatus, string ItemUnitCost) {
            this.POMT_EditLineAsync(GUID, PONumber, POLineNumber, ItemNumber, LineItemOrderedQuantity, PromisedDateOld, PromisedDate, POLineStatus, ItemUnitCost, null);
        }
        
        /// <remarks/>
        public void POMT_EditLineAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string LineItemOrderedQuantity, string PromisedDateOld, string PromisedDate, string POLineStatus, string ItemUnitCost, object userState) {
            if ((this.POMT_EditLineOperationCompleted == null)) {
                this.POMT_EditLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_EditLineOperationCompleted);
            }
            this.InvokeAsync("POMT_EditLine", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        LineItemOrderedQuantity,
                        PromisedDateOld,
                        PromisedDate,
                        POLineStatus,
                        ItemUnitCost}, this.POMT_EditLineOperationCompleted, userState);
        }
        
        private void OnPOMT_EditLineOperationCompleted(object arg) {
            if ((this.POMT_EditLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_EditLineCompleted(this, new POMT_EditLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_ADDLineText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_ADDLineText(string GUID, string PONumber, string POLineNumber, string ItemNumber, string POLineType, string PromisedDate, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("POMT_ADDLineText", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        POLineType,
                        PromisedDate,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_ADDLineText(string GUID, string PONumber, string POLineNumber, string ItemNumber, string POLineType, string PromisedDate, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_ADDLineText", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        POLineType,
                        PromisedDate,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_ADDLineText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_ADDLineTextAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string POLineType, string PromisedDate, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.POMT_ADDLineTextAsync(GUID, PONumber, POLineNumber, ItemNumber, POLineType, PromisedDate, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void POMT_ADDLineTextAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string POLineType, string PromisedDate, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.POMT_ADDLineTextOperationCompleted == null)) {
                this.POMT_ADDLineTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_ADDLineTextOperationCompleted);
            }
            this.InvokeAsync("POMT_ADDLineText", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        POLineType,
                        PromisedDate,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.POMT_ADDLineTextOperationCompleted, userState);
        }
        
        private void OnPOMT_ADDLineTextOperationCompleted(object arg) {
            if ((this.POMT_ADDLineTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_ADDLineTextCompleted(this, new POMT_ADDLineTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_DelLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_DelLine(string GUID, string PONumber, string POLineNumber, string ItemNumber, string PromisedDate) {
            object[] results = this.Invoke("POMT_DelLine", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        PromisedDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_DelLine(string GUID, string PONumber, string POLineNumber, string ItemNumber, string PromisedDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_DelLine", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        PromisedDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_DelLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_DelLineAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string PromisedDate) {
            this.POMT_DelLineAsync(GUID, PONumber, POLineNumber, ItemNumber, PromisedDate, null);
        }
        
        /// <remarks/>
        public void POMT_DelLineAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string PromisedDate, object userState) {
            if ((this.POMT_DelLineOperationCompleted == null)) {
                this.POMT_DelLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_DelLineOperationCompleted);
            }
            this.InvokeAsync("POMT_DelLine", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        PromisedDate}, this.POMT_DelLineOperationCompleted, userState);
        }
        
        private void OnPOMT_DelLineOperationCompleted(object arg) {
            if ((this.POMT_DelLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_DelLineCompleted(this, new POMT_DelLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/POMT_EditHeader", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string POMT_EditHeader(string GUID, string PONumber, string POReference) {
            object[] results = this.Invoke("POMT_EditHeader", new object[] {
                        GUID,
                        PONumber,
                        POReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPOMT_EditHeader(string GUID, string PONumber, string POReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("POMT_EditHeader", new object[] {
                        GUID,
                        PONumber,
                        POReference}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPOMT_EditHeader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void POMT_EditHeaderAsync(string GUID, string PONumber, string POReference) {
            this.POMT_EditHeaderAsync(GUID, PONumber, POReference, null);
        }
        
        /// <remarks/>
        public void POMT_EditHeaderAsync(string GUID, string PONumber, string POReference, object userState) {
            if ((this.POMT_EditHeaderOperationCompleted == null)) {
                this.POMT_EditHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOMT_EditHeaderOperationCompleted);
            }
            this.InvokeAsync("POMT_EditHeader", new object[] {
                        GUID,
                        PONumber,
                        POReference}, this.POMT_EditHeaderOperationCompleted, userState);
        }
        
        private void OnPOMT_EditHeaderOperationCompleted(object arg) {
            if ((this.POMT_EditHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POMT_EditHeaderCompleted(this, new POMT_EditHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/COMT_ADDHeader", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string COMT_ADDHeader(string GUID, string CONumber, string CustomerID) {
            object[] results = this.Invoke("COMT_ADDHeader", new object[] {
                        GUID,
                        CONumber,
                        CustomerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCOMT_ADDHeader(string GUID, string CONumber, string CustomerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("COMT_ADDHeader", new object[] {
                        GUID,
                        CONumber,
                        CustomerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCOMT_ADDHeader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void COMT_ADDHeaderAsync(string GUID, string CONumber, string CustomerID) {
            this.COMT_ADDHeaderAsync(GUID, CONumber, CustomerID, null);
        }
        
        /// <remarks/>
        public void COMT_ADDHeaderAsync(string GUID, string CONumber, string CustomerID, object userState) {
            if ((this.COMT_ADDHeaderOperationCompleted == null)) {
                this.COMT_ADDHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCOMT_ADDHeaderOperationCompleted);
            }
            this.InvokeAsync("COMT_ADDHeader", new object[] {
                        GUID,
                        CONumber,
                        CustomerID}, this.COMT_ADDHeaderOperationCompleted, userState);
        }
        
        private void OnCOMT_ADDHeaderOperationCompleted(object arg) {
            if ((this.COMT_ADDHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.COMT_ADDHeaderCompleted(this, new COMT_ADDHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/COMT_ADDLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string COMT_ADDLine(string GUID, string CONumber, string COLineNumber, string ItemNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice) {
            object[] results = this.Invoke("COMT_ADDLine", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ItemNumber,
                        ItemOrderedQuantity,
                        PromisedShipDate,
                        COLineStatus,
                        ItemControllingNetUnitPrice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCOMT_ADDLine(string GUID, string CONumber, string COLineNumber, string ItemNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("COMT_ADDLine", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ItemNumber,
                        ItemOrderedQuantity,
                        PromisedShipDate,
                        COLineStatus,
                        ItemControllingNetUnitPrice}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCOMT_ADDLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void COMT_ADDLineAsync(string GUID, string CONumber, string COLineNumber, string ItemNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice) {
            this.COMT_ADDLineAsync(GUID, CONumber, COLineNumber, ItemNumber, ItemOrderedQuantity, PromisedShipDate, COLineStatus, ItemControllingNetUnitPrice, null);
        }
        
        /// <remarks/>
        public void COMT_ADDLineAsync(string GUID, string CONumber, string COLineNumber, string ItemNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice, object userState) {
            if ((this.COMT_ADDLineOperationCompleted == null)) {
                this.COMT_ADDLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCOMT_ADDLineOperationCompleted);
            }
            this.InvokeAsync("COMT_ADDLine", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ItemNumber,
                        ItemOrderedQuantity,
                        PromisedShipDate,
                        COLineStatus,
                        ItemControllingNetUnitPrice}, this.COMT_ADDLineOperationCompleted, userState);
        }
        
        private void OnCOMT_ADDLineOperationCompleted(object arg) {
            if ((this.COMT_ADDLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.COMT_ADDLineCompleted(this, new COMT_ADDLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/COMT_EditLine", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string COMT_EditLine(string GUID, string CONumber, string COLineNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice) {
            object[] results = this.Invoke("COMT_EditLine", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ItemOrderedQuantity,
                        PromisedShipDate,
                        COLineStatus,
                        ItemControllingNetUnitPrice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCOMT_EditLine(string GUID, string CONumber, string COLineNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("COMT_EditLine", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ItemOrderedQuantity,
                        PromisedShipDate,
                        COLineStatus,
                        ItemControllingNetUnitPrice}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCOMT_EditLine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void COMT_EditLineAsync(string GUID, string CONumber, string COLineNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice) {
            this.COMT_EditLineAsync(GUID, CONumber, COLineNumber, ItemOrderedQuantity, PromisedShipDate, COLineStatus, ItemControllingNetUnitPrice, null);
        }
        
        /// <remarks/>
        public void COMT_EditLineAsync(string GUID, string CONumber, string COLineNumber, string ItemOrderedQuantity, string PromisedShipDate, string COLineStatus, string ItemControllingNetUnitPrice, object userState) {
            if ((this.COMT_EditLineOperationCompleted == null)) {
                this.COMT_EditLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCOMT_EditLineOperationCompleted);
            }
            this.InvokeAsync("COMT_EditLine", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ItemOrderedQuantity,
                        PromisedShipDate,
                        COLineStatus,
                        ItemControllingNetUnitPrice}, this.COMT_EditLineOperationCompleted, userState);
        }
        
        private void OnCOMT_EditLineOperationCompleted(object arg) {
            if ((this.COMT_EditLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.COMT_EditLineCompleted(this, new COMT_EditLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/COMT_ADDLineText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string COMT_ADDLineText(string GUID, string CONumber, string COLineNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("COMT_ADDLineText", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCOMT_ADDLineText(string GUID, string CONumber, string COLineNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("COMT_ADDLineText", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCOMT_ADDLineText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void COMT_ADDLineTextAsync(string GUID, string CONumber, string COLineNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.COMT_ADDLineTextAsync(GUID, CONumber, COLineNumber, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void COMT_ADDLineTextAsync(string GUID, string CONumber, string COLineNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.COMT_ADDLineTextOperationCompleted == null)) {
                this.COMT_ADDLineTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCOMT_ADDLineTextOperationCompleted);
            }
            this.InvokeAsync("COMT_ADDLineText", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.COMT_ADDLineTextOperationCompleted, userState);
        }
        
        private void OnCOMT_ADDLineTextOperationCompleted(object arg) {
            if ((this.COMT_ADDLineTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.COMT_ADDLineTextCompleted(this, new COMT_ADDLineTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/COMT_DELLineText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string COMT_DELLineText(string GUID, string CONumber, string COLineNumber) {
            object[] results = this.Invoke("COMT_DELLineText", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCOMT_DELLineText(string GUID, string CONumber, string COLineNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("COMT_DELLineText", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCOMT_DELLineText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void COMT_DELLineTextAsync(string GUID, string CONumber, string COLineNumber) {
            this.COMT_DELLineTextAsync(GUID, CONumber, COLineNumber, null);
        }
        
        /// <remarks/>
        public void COMT_DELLineTextAsync(string GUID, string CONumber, string COLineNumber, object userState) {
            if ((this.COMT_DELLineTextOperationCompleted == null)) {
                this.COMT_DELLineTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCOMT_DELLineTextOperationCompleted);
            }
            this.InvokeAsync("COMT_DELLineText", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber}, this.COMT_DELLineTextOperationCompleted, userState);
        }
        
        private void OnCOMT_DELLineTextOperationCompleted(object arg) {
            if ((this.COMT_DELLineTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.COMT_DELLineTextCompleted(this, new COMT_DELLineTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MORVR", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MORVR(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory) {
            object[] results = this.Invoke("MORVR", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMORVR(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MORVR", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMORVR(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MORVRAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory) {
            this.MORVRAsync(GUID, MONumber, MOLineNumber, ItemNumber, ReceiptQuantity, Stockroom, Bin, InventoryCategory, null);
        }
        
        /// <remarks/>
        public void MORVRAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, object userState) {
            if ((this.MORVROperationCompleted == null)) {
                this.MORVROperationCompleted = new System.Threading.SendOrPostCallback(this.OnMORVROperationCompleted);
            }
            this.InvokeAsync("MORVR", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory}, this.MORVROperationCompleted, userState);
        }
        
        private void OnMORVROperationCompleted(object arg) {
            if ((this.MORVRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MORVRCompleted(this, new MORVRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MORVX", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MORVX(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory) {
            object[] results = this.Invoke("MORVX", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMORVX(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MORVX", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMORVX(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MORVXAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory) {
            this.MORVXAsync(GUID, MONumber, MOLineNumber, ItemNumber, RefQuantity, Stockroom, Bin, InventoryCategory, null);
        }
        
        /// <remarks/>
        public void MORVXAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, object userState) {
            if ((this.MORVXOperationCompleted == null)) {
                this.MORVXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMORVXOperationCompleted);
            }
            this.InvokeAsync("MORVX", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory}, this.MORVXOperationCompleted, userState);
        }
        
        private void OnMORVXOperationCompleted(object arg) {
            if ((this.MORVXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MORVXCompleted(this, new MORVXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PORVR", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PORVR(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate) {
            object[] results = this.Invoke("PORVR", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate,
                        POReceiptDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPORVR(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PORVR", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate,
                        POReceiptDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPORVR(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PORVRAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate) {
            this.PORVRAsync(GUID, PONumber, POLineNumber, ItemNumber, ReceiptQuantity, Stockroom, Bin, InventoryCategory, PromisedDate, POReceiptDate, null);
        }
        
        /// <remarks/>
        public void PORVRAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate, object userState) {
            if ((this.PORVROperationCompleted == null)) {
                this.PORVROperationCompleted = new System.Threading.SendOrPostCallback(this.OnPORVROperationCompleted);
            }
            this.InvokeAsync("PORVR", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate,
                        POReceiptDate}, this.PORVROperationCompleted, userState);
        }
        
        private void OnPORVROperationCompleted(object arg) {
            if ((this.PORVRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PORVRCompleted(this, new PORVRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PORVX", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PORVX(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate) {
            object[] results = this.Invoke("PORVX", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPORVX(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PORVX", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPORVX(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PORVXAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate) {
            this.PORVXAsync(GUID, PONumber, POLineNumber, ItemNumber, RefQuantity, Stockroom, Bin, InventoryCategory, PromisedDate, null);
        }
        
        /// <remarks/>
        public void PORVXAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, object userState) {
            if ((this.PORVXOperationCompleted == null)) {
                this.PORVXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPORVXOperationCompleted);
            }
            this.InvokeAsync("PORVX", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate}, this.PORVXOperationCompleted, userState);
        }
        
        private void OnPORVXOperationCompleted(object arg) {
            if ((this.PORVXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PORVXCompleted(this, new PORVXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PORVR_PM", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PORVR_PM(string GUID, string PONumber, string POLineNumber, string ReceiptQuantity, string PromisedDate) {
            object[] results = this.Invoke("PORVR_PM", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ReceiptQuantity,
                        PromisedDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPORVR_PM(string GUID, string PONumber, string POLineNumber, string ReceiptQuantity, string PromisedDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PORVR_PM", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ReceiptQuantity,
                        PromisedDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPORVR_PM(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PORVR_PMAsync(string GUID, string PONumber, string POLineNumber, string ReceiptQuantity, string PromisedDate) {
            this.PORVR_PMAsync(GUID, PONumber, POLineNumber, ReceiptQuantity, PromisedDate, null);
        }
        
        /// <remarks/>
        public void PORVR_PMAsync(string GUID, string PONumber, string POLineNumber, string ReceiptQuantity, string PromisedDate, object userState) {
            if ((this.PORVR_PMOperationCompleted == null)) {
                this.PORVR_PMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPORVR_PMOperationCompleted);
            }
            this.InvokeAsync("PORVR_PM", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ReceiptQuantity,
                        PromisedDate}, this.PORVR_PMOperationCompleted, userState);
        }
        
        private void OnPORVR_PMOperationCompleted(object arg) {
            if ((this.PORVR_PMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PORVR_PMCompleted(this, new PORVR_PMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PORVX_PM", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PORVX_PM(string GUID, string PONumber, string POLineNumber, string ReverseQuantity, string PromisedDate) {
            object[] results = this.Invoke("PORVX_PM", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ReverseQuantity,
                        PromisedDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPORVX_PM(string GUID, string PONumber, string POLineNumber, string ReverseQuantity, string PromisedDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PORVX_PM", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ReverseQuantity,
                        PromisedDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPORVX_PM(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PORVX_PMAsync(string GUID, string PONumber, string POLineNumber, string ReverseQuantity, string PromisedDate) {
            this.PORVX_PMAsync(GUID, PONumber, POLineNumber, ReverseQuantity, PromisedDate, null);
        }
        
        /// <remarks/>
        public void PORVX_PMAsync(string GUID, string PONumber, string POLineNumber, string ReverseQuantity, string PromisedDate, object userState) {
            if ((this.PORVX_PMOperationCompleted == null)) {
                this.PORVX_PMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPORVX_PMOperationCompleted);
            }
            this.InvokeAsync("PORVX_PM", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ReverseQuantity,
                        PromisedDate}, this.PORVX_PMOperationCompleted, userState);
        }
        
        private void OnPORVX_PMOperationCompleted(object arg) {
            if ((this.PORVX_PMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PORVX_PMCompleted(this, new PORVX_PMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/SHIPI", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SHIPI(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory) {
            object[] results = this.Invoke("SHIPI", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSHIPI(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SHIPI", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSHIPI(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SHIPIAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory) {
            this.SHIPIAsync(GUID, CONumber, COLineNumber, ShippedQuantity, Stockroom, Bin, InventoryCategory, null);
        }
        
        /// <remarks/>
        public void SHIPIAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, object userState) {
            if ((this.SHIPIOperationCompleted == null)) {
                this.SHIPIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSHIPIOperationCompleted);
            }
            this.InvokeAsync("SHIPI", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory}, this.SHIPIOperationCompleted, userState);
        }
        
        private void OnSHIPIOperationCompleted(object arg) {
            if ((this.SHIPICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SHIPICompleted(this, new SHIPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/SHIPX", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SHIPX(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string ShipmentNumber) {
            object[] results = this.Invoke("SHIPX", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ShipmentNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSHIPX(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string ShipmentNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SHIPX", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ShipmentNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSHIPX(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SHIPXAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string ShipmentNumber) {
            this.SHIPXAsync(GUID, CONumber, COLineNumber, ShippedQuantity, Stockroom, Bin, InventoryCategory, ShipmentNumber, null);
        }
        
        /// <remarks/>
        public void SHIPXAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string ShipmentNumber, object userState) {
            if ((this.SHIPXOperationCompleted == null)) {
                this.SHIPXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSHIPXOperationCompleted);
            }
            this.InvokeAsync("SHIPX", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ShipmentNumber}, this.SHIPXOperationCompleted, userState);
        }
        
        private void OnSHIPXOperationCompleted(object arg) {
            if ((this.SHIPXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SHIPXCompleted(this, new SHIPXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/IMTR", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IMTR(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber) {
            object[] results = this.Invoke("IMTR", new object[] {
                        GUID,
                        ItemNumber,
                        StockroomFrom,
                        BinFrom,
                        InventoryCategoryFrom,
                        InventoryQuantity,
                        StockroomTo,
                        BinTo,
                        InventoryCategoryTo,
                        OrderType,
                        OrderNumber,
                        LineNumber,
                        DocumentNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIMTR(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IMTR", new object[] {
                        GUID,
                        ItemNumber,
                        StockroomFrom,
                        BinFrom,
                        InventoryCategoryFrom,
                        InventoryQuantity,
                        StockroomTo,
                        BinTo,
                        InventoryCategoryTo,
                        OrderType,
                        OrderNumber,
                        LineNumber,
                        DocumentNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIMTR(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IMTRAsync(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber) {
            this.IMTRAsync(GUID, ItemNumber, StockroomFrom, BinFrom, InventoryCategoryFrom, InventoryQuantity, StockroomTo, BinTo, InventoryCategoryTo, OrderType, OrderNumber, LineNumber, DocumentNumber, null);
        }
        
        /// <remarks/>
        public void IMTRAsync(string GUID, string ItemNumber, string StockroomFrom, string BinFrom, string InventoryCategoryFrom, string InventoryQuantity, string StockroomTo, string BinTo, string InventoryCategoryTo, string OrderType, string OrderNumber, string LineNumber, string DocumentNumber, object userState) {
            if ((this.IMTROperationCompleted == null)) {
                this.IMTROperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMTROperationCompleted);
            }
            this.InvokeAsync("IMTR", new object[] {
                        GUID,
                        ItemNumber,
                        StockroomFrom,
                        BinFrom,
                        InventoryCategoryFrom,
                        InventoryQuantity,
                        StockroomTo,
                        BinTo,
                        InventoryCategoryTo,
                        OrderType,
                        OrderNumber,
                        LineNumber,
                        DocumentNumber}, this.IMTROperationCompleted, userState);
        }
        
        private void OnIMTROperationCompleted(object arg) {
            if ((this.IMTRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMTRCompleted(this, new IMTRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/INVA", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string INVA(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string AdjustQuantity, string DocumentNumber, string InventoryOffsetMasterAccountNumber) {
            object[] results = this.Invoke("INVA", new object[] {
                        GUID,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ActionCode,
                        AdjustQuantity,
                        DocumentNumber,
                        InventoryOffsetMasterAccountNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginINVA(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string AdjustQuantity, string DocumentNumber, string InventoryOffsetMasterAccountNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("INVA", new object[] {
                        GUID,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ActionCode,
                        AdjustQuantity,
                        DocumentNumber,
                        InventoryOffsetMasterAccountNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndINVA(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void INVAAsync(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string AdjustQuantity, string DocumentNumber, string InventoryOffsetMasterAccountNumber) {
            this.INVAAsync(GUID, ItemNumber, Stockroom, Bin, InventoryCategory, ActionCode, AdjustQuantity, DocumentNumber, InventoryOffsetMasterAccountNumber, null);
        }
        
        /// <remarks/>
        public void INVAAsync(string GUID, string ItemNumber, string Stockroom, string Bin, string InventoryCategory, string ActionCode, string AdjustQuantity, string DocumentNumber, string InventoryOffsetMasterAccountNumber, object userState) {
            if ((this.INVAOperationCompleted == null)) {
                this.INVAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnINVAOperationCompleted);
            }
            this.InvokeAsync("INVA", new object[] {
                        GUID,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        ActionCode,
                        AdjustQuantity,
                        DocumentNumber,
                        InventoryOffsetMasterAccountNumber}, this.INVAOperationCompleted, userState);
        }
        
        private void OnINVAOperationCompleted(object arg) {
            if ((this.INVACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.INVACompleted(this, new INVACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/BILL_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BILL_ADD(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate) {
            object[] results = this.Invoke("BILL_ADD", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        ComponentType,
                        RequiredQuantity,
                        QuantityType,
                        LeadTimeOffsetDays,
                        InEffectivityDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBILL_ADD(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BILL_ADD", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        ComponentType,
                        RequiredQuantity,
                        QuantityType,
                        LeadTimeOffsetDays,
                        InEffectivityDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBILL_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BILL_ADDAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate) {
            this.BILL_ADDAsync(GUID, Parent, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, ComponentType, RequiredQuantity, QuantityType, LeadTimeOffsetDays, InEffectivityDate, null);
        }
        
        /// <remarks/>
        public void BILL_ADDAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate, object userState) {
            if ((this.BILL_ADDOperationCompleted == null)) {
                this.BILL_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBILL_ADDOperationCompleted);
            }
            this.InvokeAsync("BILL_ADD", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        ComponentType,
                        RequiredQuantity,
                        QuantityType,
                        LeadTimeOffsetDays,
                        InEffectivityDate}, this.BILL_ADDOperationCompleted, userState);
        }
        
        private void OnBILL_ADDOperationCompleted(object arg) {
            if ((this.BILL_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BILL_ADDCompleted(this, new BILL_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/BILL_EDIT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BILL_EDIT(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate) {
            object[] results = this.Invoke("BILL_EDIT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        ComponentType,
                        RequiredQuantity,
                        QuantityType,
                        LeadTimeOffsetDays,
                        InEffectivityDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBILL_EDIT(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BILL_EDIT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        ComponentType,
                        RequiredQuantity,
                        QuantityType,
                        LeadTimeOffsetDays,
                        InEffectivityDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBILL_EDIT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BILL_EDITAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate) {
            this.BILL_EDITAsync(GUID, Parent, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, ComponentType, RequiredQuantity, QuantityType, LeadTimeOffsetDays, InEffectivityDate, null);
        }
        
        /// <remarks/>
        public void BILL_EDITAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string ComponentType, string RequiredQuantity, string QuantityType, string LeadTimeOffsetDays, string InEffectivityDate, object userState) {
            if ((this.BILL_EDITOperationCompleted == null)) {
                this.BILL_EDITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBILL_EDITOperationCompleted);
            }
            this.InvokeAsync("BILL_EDIT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        ComponentType,
                        RequiredQuantity,
                        QuantityType,
                        LeadTimeOffsetDays,
                        InEffectivityDate}, this.BILL_EDITOperationCompleted, userState);
        }
        
        private void OnBILL_EDITOperationCompleted(object arg) {
            if ((this.BILL_EDITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BILL_EDITCompleted(this, new BILL_EDITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/BILL_DEL", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BILL_DEL(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string InEffectivityDate, string OutEffectivityDate) {
            object[] results = this.Invoke("BILL_DEL", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        InEffectivityDate,
                        OutEffectivityDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBILL_DEL(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string InEffectivityDate, string OutEffectivityDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BILL_DEL", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        InEffectivityDate,
                        OutEffectivityDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBILL_DEL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BILL_DELAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string InEffectivityDate, string OutEffectivityDate) {
            this.BILL_DELAsync(GUID, Parent, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, InEffectivityDate, OutEffectivityDate, null);
        }
        
        /// <remarks/>
        public void BILL_DELAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string InEffectivityDate, string OutEffectivityDate, object userState) {
            if ((this.BILL_DELOperationCompleted == null)) {
                this.BILL_DELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBILL_DELOperationCompleted);
            }
            this.InvokeAsync("BILL_DEL", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        InEffectivityDate,
                        OutEffectivityDate}, this.BILL_DELOperationCompleted, userState);
        }
        
        private void OnBILL_DELOperationCompleted(object arg) {
            if ((this.BILL_DELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BILL_DELCompleted(this, new BILL_DELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/BILL_ADDTEXT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BILL_ADDTEXT(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("BILL_ADDTEXT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBILL_ADDTEXT(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BILL_ADDTEXT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBILL_ADDTEXT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BILL_ADDTEXTAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.BILL_ADDTEXTAsync(GUID, Parent, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void BILL_ADDTEXTAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.BILL_ADDTEXTOperationCompleted == null)) {
                this.BILL_ADDTEXTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBILL_ADDTEXTOperationCompleted);
            }
            this.InvokeAsync("BILL_ADDTEXT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.BILL_ADDTEXTOperationCompleted, userState);
        }
        
        private void OnBILL_ADDTEXTOperationCompleted(object arg) {
            if ((this.BILL_ADDTEXTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BILL_ADDTEXTCompleted(this, new BILL_ADDTEXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/BILL_DELTEXT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BILL_DELTEXT(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber) {
            object[] results = this.Invoke("BILL_DELTEXT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBILL_DELTEXT(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BILL_DELTEXT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBILL_DELTEXT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BILL_DELTEXTAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber) {
            this.BILL_DELTEXTAsync(GUID, Parent, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, null);
        }
        
        /// <remarks/>
        public void BILL_DELTEXTAsync(string GUID, string Parent, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, object userState) {
            if ((this.BILL_DELTEXTOperationCompleted == null)) {
                this.BILL_DELTEXTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBILL_DELTEXTOperationCompleted);
            }
            this.InvokeAsync("BILL_DELTEXT", new object[] {
                        GUID,
                        Parent,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber}, this.BILL_DELTEXTOperationCompleted, userState);
        }
        
        private void OnBILL_DELTEXTOperationCompleted(object arg) {
            if ((this.BILL_DELTEXTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BILL_DELTEXTCompleted(this, new BILL_DELTEXTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/TEXT_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TEXT_ADD(string GUID, string TextType, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("TEXT_ADD", new object[] {
                        GUID,
                        TextType,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTEXT_ADD(string GUID, string TextType, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TEXT_ADD", new object[] {
                        GUID,
                        TextType,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTEXT_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TEXT_ADDAsync(string GUID, string TextType, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.TEXT_ADDAsync(GUID, TextType, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void TEXT_ADDAsync(string GUID, string TextType, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.TEXT_ADDOperationCompleted == null)) {
                this.TEXT_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTEXT_ADDOperationCompleted);
            }
            this.InvokeAsync("TEXT_ADD", new object[] {
                        GUID,
                        TextType,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.TEXT_ADDOperationCompleted, userState);
        }
        
        private void OnTEXT_ADDOperationCompleted(object arg) {
            if ((this.TEXT_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TEXT_ADDCompleted(this, new TEXT_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/TEXT_EDIT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TEXT_EDIT(string GUID, string TextType, string TextID, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("TEXT_EDIT", new object[] {
                        GUID,
                        TextType,
                        TextID,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTEXT_EDIT(string GUID, string TextType, string TextID, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TEXT_EDIT", new object[] {
                        GUID,
                        TextType,
                        TextID,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTEXT_EDIT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TEXT_EDITAsync(string GUID, string TextType, string TextID, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.TEXT_EDITAsync(GUID, TextType, TextID, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void TEXT_EDITAsync(string GUID, string TextType, string TextID, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.TEXT_EDITOperationCompleted == null)) {
                this.TEXT_EDITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTEXT_EDITOperationCompleted);
            }
            this.InvokeAsync("TEXT_EDIT", new object[] {
                        GUID,
                        TextType,
                        TextID,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.TEXT_EDITOperationCompleted, userState);
        }
        
        private void OnTEXT_EDITOperationCompleted(object arg) {
            if ((this.TEXT_EDITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TEXT_EDITCompleted(this, new TEXT_EDITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/TEXT_DEL", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TEXT_DEL(string GUID, string TextType, string TextID) {
            object[] results = this.Invoke("TEXT_DEL", new object[] {
                        GUID,
                        TextType,
                        TextID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTEXT_DEL(string GUID, string TextType, string TextID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TEXT_DEL", new object[] {
                        GUID,
                        TextType,
                        TextID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTEXT_DEL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TEXT_DELAsync(string GUID, string TextType, string TextID) {
            this.TEXT_DELAsync(GUID, TextType, TextID, null);
        }
        
        /// <remarks/>
        public void TEXT_DELAsync(string GUID, string TextType, string TextID, object userState) {
            if ((this.TEXT_DELOperationCompleted == null)) {
                this.TEXT_DELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTEXT_DELOperationCompleted);
            }
            this.InvokeAsync("TEXT_DEL", new object[] {
                        GUID,
                        TextType,
                        TextID}, this.TEXT_DELOperationCompleted, userState);
        }
        
        private void OnTEXT_DELOperationCompleted(object arg) {
            if ((this.TEXT_DELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TEXT_DELCompleted(this, new TEXT_DELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/VEID_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VEID_ADD(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus) {
            object[] results = this.Invoke("VEID_ADD", new object[] {
                        GUID,
                        VendorID,
                        VendorName,
                        VendorContact,
                        VendorContactPhone,
                        VendorContactEmail,
                        VendorStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVEID_ADD(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VEID_ADD", new object[] {
                        GUID,
                        VendorID,
                        VendorName,
                        VendorContact,
                        VendorContactPhone,
                        VendorContactEmail,
                        VendorStatus}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVEID_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VEID_ADDAsync(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus) {
            this.VEID_ADDAsync(GUID, VendorID, VendorName, VendorContact, VendorContactPhone, VendorContactEmail, VendorStatus, null);
        }
        
        /// <remarks/>
        public void VEID_ADDAsync(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus, object userState) {
            if ((this.VEID_ADDOperationCompleted == null)) {
                this.VEID_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVEID_ADDOperationCompleted);
            }
            this.InvokeAsync("VEID_ADD", new object[] {
                        GUID,
                        VendorID,
                        VendorName,
                        VendorContact,
                        VendorContactPhone,
                        VendorContactEmail,
                        VendorStatus}, this.VEID_ADDOperationCompleted, userState);
        }
        
        private void OnVEID_ADDOperationCompleted(object arg) {
            if ((this.VEID_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VEID_ADDCompleted(this, new VEID_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/VEID_EDIT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VEID_EDIT(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus) {
            object[] results = this.Invoke("VEID_EDIT", new object[] {
                        GUID,
                        VendorID,
                        VendorName,
                        VendorContact,
                        VendorContactPhone,
                        VendorContactEmail,
                        VendorStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVEID_EDIT(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VEID_EDIT", new object[] {
                        GUID,
                        VendorID,
                        VendorName,
                        VendorContact,
                        VendorContactPhone,
                        VendorContactEmail,
                        VendorStatus}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVEID_EDIT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VEID_EDITAsync(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus) {
            this.VEID_EDITAsync(GUID, VendorID, VendorName, VendorContact, VendorContactPhone, VendorContactEmail, VendorStatus, null);
        }
        
        /// <remarks/>
        public void VEID_EDITAsync(string GUID, string VendorID, string VendorName, string VendorContact, string VendorContactPhone, string VendorContactEmail, string VendorStatus, object userState) {
            if ((this.VEID_EDITOperationCompleted == null)) {
                this.VEID_EDITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVEID_EDITOperationCompleted);
            }
            this.InvokeAsync("VEID_EDIT", new object[] {
                        GUID,
                        VendorID,
                        VendorName,
                        VendorContact,
                        VendorContactPhone,
                        VendorContactEmail,
                        VendorStatus}, this.VEID_EDITOperationCompleted, userState);
        }
        
        private void OnVEID_EDITOperationCompleted(object arg) {
            if ((this.VEID_EDITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VEID_EDITCompleted(this, new VEID_EDITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/VEID_EDITVAT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VEID_EDITVAT(string GUID, string VendorID, string TermsCode, string VATID) {
            object[] results = this.Invoke("VEID_EDITVAT", new object[] {
                        GUID,
                        VendorID,
                        TermsCode,
                        VATID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVEID_EDITVAT(string GUID, string VendorID, string TermsCode, string VATID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VEID_EDITVAT", new object[] {
                        GUID,
                        VendorID,
                        TermsCode,
                        VATID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVEID_EDITVAT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VEID_EDITVATAsync(string GUID, string VendorID, string TermsCode, string VATID) {
            this.VEID_EDITVATAsync(GUID, VendorID, TermsCode, VATID, null);
        }
        
        /// <remarks/>
        public void VEID_EDITVATAsync(string GUID, string VendorID, string TermsCode, string VATID, object userState) {
            if ((this.VEID_EDITVATOperationCompleted == null)) {
                this.VEID_EDITVATOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVEID_EDITVATOperationCompleted);
            }
            this.InvokeAsync("VEID_EDITVAT", new object[] {
                        GUID,
                        VendorID,
                        TermsCode,
                        VATID}, this.VEID_EDITVATOperationCompleted, userState);
        }
        
        private void OnVEID_EDITVATOperationCompleted(object arg) {
            if ((this.VEID_EDITVATCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VEID_EDITVATCompleted(this, new VEID_EDITVATCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/VEID_EDITDetail", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VEID_EDITDetail(string GUID, string VendorID, string VendAdd1, string VendAdd2, string VendZip, string VendFax, string BankAcct) {
            object[] results = this.Invoke("VEID_EDITDetail", new object[] {
                        GUID,
                        VendorID,
                        VendAdd1,
                        VendAdd2,
                        VendZip,
                        VendFax,
                        BankAcct});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVEID_EDITDetail(string GUID, string VendorID, string VendAdd1, string VendAdd2, string VendZip, string VendFax, string BankAcct, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VEID_EDITDetail", new object[] {
                        GUID,
                        VendorID,
                        VendAdd1,
                        VendAdd2,
                        VendZip,
                        VendFax,
                        BankAcct}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVEID_EDITDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VEID_EDITDetailAsync(string GUID, string VendorID, string VendAdd1, string VendAdd2, string VendZip, string VendFax, string BankAcct) {
            this.VEID_EDITDetailAsync(GUID, VendorID, VendAdd1, VendAdd2, VendZip, VendFax, BankAcct, null);
        }
        
        /// <remarks/>
        public void VEID_EDITDetailAsync(string GUID, string VendorID, string VendAdd1, string VendAdd2, string VendZip, string VendFax, string BankAcct, object userState) {
            if ((this.VEID_EDITDetailOperationCompleted == null)) {
                this.VEID_EDITDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVEID_EDITDetailOperationCompleted);
            }
            this.InvokeAsync("VEID_EDITDetail", new object[] {
                        GUID,
                        VendorID,
                        VendAdd1,
                        VendAdd2,
                        VendZip,
                        VendFax,
                        BankAcct}, this.VEID_EDITDetailOperationCompleted, userState);
        }
        
        private void OnVEID_EDITDetailOperationCompleted(object arg) {
            if ((this.VEID_EDITDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VEID_EDITDetailCompleted(this, new VEID_EDITDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/CUID_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CUID_ADD(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState) {
            object[] results = this.Invoke("CUID_ADD", new object[] {
                        GUID,
                        CustomerID,
                        CustomerName,
                        CustomerContact,
                        CustomerContactPhone,
                        CustomerContactEmail,
                        CustomerState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCUID_ADD(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CUID_ADD", new object[] {
                        GUID,
                        CustomerID,
                        CustomerName,
                        CustomerContact,
                        CustomerContactPhone,
                        CustomerContactEmail,
                        CustomerState}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCUID_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CUID_ADDAsync(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState) {
            this.CUID_ADDAsync(GUID, CustomerID, CustomerName, CustomerContact, CustomerContactPhone, CustomerContactEmail, CustomerState, null);
        }
        
        /// <remarks/>
        public void CUID_ADDAsync(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState, object userState) {
            if ((this.CUID_ADDOperationCompleted == null)) {
                this.CUID_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCUID_ADDOperationCompleted);
            }
            this.InvokeAsync("CUID_ADD", new object[] {
                        GUID,
                        CustomerID,
                        CustomerName,
                        CustomerContact,
                        CustomerContactPhone,
                        CustomerContactEmail,
                        CustomerState}, this.CUID_ADDOperationCompleted, userState);
        }
        
        private void OnCUID_ADDOperationCompleted(object arg) {
            if ((this.CUID_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CUID_ADDCompleted(this, new CUID_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/CUID_EDIT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CUID_EDIT(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState) {
            object[] results = this.Invoke("CUID_EDIT", new object[] {
                        GUID,
                        CustomerID,
                        CustomerName,
                        CustomerContact,
                        CustomerContactPhone,
                        CustomerContactEmail,
                        CustomerState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCUID_EDIT(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CUID_EDIT", new object[] {
                        GUID,
                        CustomerID,
                        CustomerName,
                        CustomerContact,
                        CustomerContactPhone,
                        CustomerContactEmail,
                        CustomerState}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCUID_EDIT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CUID_EDITAsync(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState) {
            this.CUID_EDITAsync(GUID, CustomerID, CustomerName, CustomerContact, CustomerContactPhone, CustomerContactEmail, CustomerState, null);
        }
        
        /// <remarks/>
        public void CUID_EDITAsync(string GUID, string CustomerID, string CustomerName, string CustomerContact, string CustomerContactPhone, string CustomerContactEmail, string CustomerState, object userState) {
            if ((this.CUID_EDITOperationCompleted == null)) {
                this.CUID_EDITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCUID_EDITOperationCompleted);
            }
            this.InvokeAsync("CUID_EDIT", new object[] {
                        GUID,
                        CustomerID,
                        CustomerName,
                        CustomerContact,
                        CustomerContactPhone,
                        CustomerContactEmail,
                        CustomerState}, this.CUID_EDITOperationCompleted, userState);
        }
        
        private void OnCUID_EDITOperationCompleted(object arg) {
            if ((this.CUID_EDITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CUID_EDITCompleted(this, new CUID_EDITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/CUID_EDITTaxCode", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CUID_EDITTaxCode(string GUID, string CustomerID, string TAXCode) {
            object[] results = this.Invoke("CUID_EDITTaxCode", new object[] {
                        GUID,
                        CustomerID,
                        TAXCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCUID_EDITTaxCode(string GUID, string CustomerID, string TAXCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CUID_EDITTaxCode", new object[] {
                        GUID,
                        CustomerID,
                        TAXCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCUID_EDITTaxCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CUID_EDITTaxCodeAsync(string GUID, string CustomerID, string TAXCode) {
            this.CUID_EDITTaxCodeAsync(GUID, CustomerID, TAXCode, null);
        }
        
        /// <remarks/>
        public void CUID_EDITTaxCodeAsync(string GUID, string CustomerID, string TAXCode, object userState) {
            if ((this.CUID_EDITTaxCodeOperationCompleted == null)) {
                this.CUID_EDITTaxCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCUID_EDITTaxCodeOperationCompleted);
            }
            this.InvokeAsync("CUID_EDITTaxCode", new object[] {
                        GUID,
                        CustomerID,
                        TAXCode}, this.CUID_EDITTaxCodeOperationCompleted, userState);
        }
        
        private void OnCUID_EDITTaxCodeOperationCompleted(object arg) {
            if ((this.CUID_EDITTaxCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CUID_EDITTaxCodeCompleted(this, new CUID_EDITTaxCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/LMMT_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LMMT_ADD(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume) {
            object[] results = this.Invoke("LMMT_ADD", new object[] {
                        GUID,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        InventoryLocationDescription,
                        Volume});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLMMT_ADD(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LMMT_ADD", new object[] {
                        GUID,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        InventoryLocationDescription,
                        Volume}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLMMT_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LMMT_ADDAsync(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume) {
            this.LMMT_ADDAsync(GUID, Stockroom, Bin, InventoryCategory, InventoryLocationDescription, Volume, null);
        }
        
        /// <remarks/>
        public void LMMT_ADDAsync(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume, object userState) {
            if ((this.LMMT_ADDOperationCompleted == null)) {
                this.LMMT_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMMT_ADDOperationCompleted);
            }
            this.InvokeAsync("LMMT_ADD", new object[] {
                        GUID,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        InventoryLocationDescription,
                        Volume}, this.LMMT_ADDOperationCompleted, userState);
        }
        
        private void OnLMMT_ADDOperationCompleted(object arg) {
            if ((this.LMMT_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMMT_ADDCompleted(this, new LMMT_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/LMMT_EDIT", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LMMT_EDIT(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume) {
            object[] results = this.Invoke("LMMT_EDIT", new object[] {
                        GUID,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        InventoryLocationDescription,
                        Volume});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLMMT_EDIT(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LMMT_EDIT", new object[] {
                        GUID,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        InventoryLocationDescription,
                        Volume}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLMMT_EDIT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LMMT_EDITAsync(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume) {
            this.LMMT_EDITAsync(GUID, Stockroom, Bin, InventoryCategory, InventoryLocationDescription, Volume, null);
        }
        
        /// <remarks/>
        public void LMMT_EDITAsync(string GUID, string Stockroom, string Bin, string InventoryCategory, string InventoryLocationDescription, string Volume, object userState) {
            if ((this.LMMT_EDITOperationCompleted == null)) {
                this.LMMT_EDITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMMT_EDITOperationCompleted);
            }
            this.InvokeAsync("LMMT_EDIT", new object[] {
                        GUID,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        InventoryLocationDescription,
                        Volume}, this.LMMT_EDITOperationCompleted, userState);
        }
        
        private void OnLMMT_EDITOperationCompleted(object arg) {
            if ((this.LMMT_EDITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMMT_EDITCompleted(this, new LMMT_EDITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/LMMT_DEL", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LMMT_DEL(string GUID, string Stockroom, string Bin) {
            object[] results = this.Invoke("LMMT_DEL", new object[] {
                        GUID,
                        Stockroom,
                        Bin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLMMT_DEL(string GUID, string Stockroom, string Bin, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LMMT_DEL", new object[] {
                        GUID,
                        Stockroom,
                        Bin}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLMMT_DEL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LMMT_DELAsync(string GUID, string Stockroom, string Bin) {
            this.LMMT_DELAsync(GUID, Stockroom, Bin, null);
        }
        
        /// <remarks/>
        public void LMMT_DELAsync(string GUID, string Stockroom, string Bin, object userState) {
            if ((this.LMMT_DELOperationCompleted == null)) {
                this.LMMT_DELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLMMT_DELOperationCompleted);
            }
            this.InvokeAsync("LMMT_DEL", new object[] {
                        GUID,
                        Stockroom,
                        Bin}, this.LMMT_DELOperationCompleted, userState);
        }
        
        private void OnLMMT_DELOperationCompleted(object arg) {
            if ((this.LMMT_DELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LMMT_DELCompleted(this, new LMMT_DELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_ADD", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_ADD(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity) {
            object[] results = this.Invoke("PICK_ADD", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        RequiredQuantity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_ADD(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_ADD", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        RequiredQuantity}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_ADD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_ADDAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity) {
            this.PICK_ADDAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, ComponentLineType, PointOfUseID, OperationSequenceNumber, ItemNumber, RequiredQuantity, null);
        }
        
        /// <remarks/>
        public void PICK_ADDAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity, object userState) {
            if ((this.PICK_ADDOperationCompleted == null)) {
                this.PICK_ADDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_ADDOperationCompleted);
            }
            this.InvokeAsync("PICK_ADD", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        RequiredQuantity}, this.PICK_ADDOperationCompleted, userState);
        }
        
        private void OnPICK_ADDOperationCompleted(object arg) {
            if ((this.PICK_ADDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_ADDCompleted(this, new PICK_ADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_DEL", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_DEL(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string QuantityType) {
            object[] results = this.Invoke("PICK_DEL", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        QuantityType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_DEL(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string QuantityType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_DEL", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        QuantityType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_DEL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_DELAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string QuantityType) {
            this.PICK_DELAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, ComponentLineType, PointOfUseID, OperationSequenceNumber, ItemNumber, QuantityType, null);
        }
        
        /// <remarks/>
        public void PICK_DELAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string QuantityType, object userState) {
            if ((this.PICK_DELOperationCompleted == null)) {
                this.PICK_DELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_DELOperationCompleted);
            }
            this.InvokeAsync("PICK_DEL", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        QuantityType}, this.PICK_DELOperationCompleted, userState);
        }
        
        private void OnPICK_DELOperationCompleted(object arg) {
            if ((this.PICK_DELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_DELCompleted(this, new PICK_DELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_EDITDetail", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_EDITDetail(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity, string QuantityType) {
            object[] results = this.Invoke("PICK_EDITDetail", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        RequiredQuantity,
                        QuantityType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_EDITDetail(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity, string QuantityType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_EDITDetail", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        RequiredQuantity,
                        QuantityType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_EDITDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_EDITDetailAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity, string QuantityType) {
            this.PICK_EDITDetailAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, ComponentLineType, PointOfUseID, OperationSequenceNumber, ItemNumber, RequiredQuantity, QuantityType, null);
        }
        
        /// <remarks/>
        public void PICK_EDITDetailAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string RequiredQuantity, string QuantityType, object userState) {
            if ((this.PICK_EDITDetailOperationCompleted == null)) {
                this.PICK_EDITDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_EDITDetailOperationCompleted);
            }
            this.InvokeAsync("PICK_EDITDetail", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        RequiredQuantity,
                        QuantityType}, this.PICK_EDITDetailOperationCompleted, userState);
        }
        
        private void OnPICK_EDITDetailOperationCompleted(object arg) {
            if ((this.PICK_EDITDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_EDITDetailCompleted(this, new PICK_EDITDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_IssueLJ", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_IssueLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string IssuedQuantity) {
            object[] results = this.Invoke("PICK_IssueLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        IssuedQuantity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_IssueLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string IssuedQuantity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_IssueLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        IssuedQuantity}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_IssueLJ(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_IssueLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string IssuedQuantity) {
            this.PICK_IssueLJAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, PointOfUseID, OperationSequenceNumber, ItemNumber, Stockroom, Bin, IssuedQuantity, null);
        }
        
        /// <remarks/>
        public void PICK_IssueLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string IssuedQuantity, object userState) {
            if ((this.PICK_IssueLJOperationCompleted == null)) {
                this.PICK_IssueLJOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_IssueLJOperationCompleted);
            }
            this.InvokeAsync("PICK_IssueLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        IssuedQuantity}, this.PICK_IssueLJOperationCompleted, userState);
        }
        
        private void OnPICK_IssueLJOperationCompleted(object arg) {
            if ((this.PICK_IssueLJCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_IssueLJCompleted(this, new PICK_IssueLJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_IssueGS", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_IssueGS(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string IssuedQuantity) {
            object[] results = this.Invoke("PICK_IssueGS", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        IssuedQuantity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_IssueGS(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string IssuedQuantity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_IssueGS", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        IssuedQuantity}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_IssueGS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_IssueGSAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string IssuedQuantity) {
            this.PICK_IssueGSAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, PointOfUseID, OperationSequenceNumber, ItemNumber, IssuedQuantity, null);
        }
        
        /// <remarks/>
        public void PICK_IssueGSAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string IssuedQuantity, object userState) {
            if ((this.PICK_IssueGSOperationCompleted == null)) {
                this.PICK_IssueGSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_IssueGSOperationCompleted);
            }
            this.InvokeAsync("PICK_IssueGS", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        IssuedQuantity}, this.PICK_IssueGSOperationCompleted, userState);
        }
        
        private void OnPICK_IssueGSOperationCompleted(object arg) {
            if ((this.PICK_IssueGSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_IssueGSCompleted(this, new PICK_IssueGSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_ReverseGS", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_ReverseGS(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string ReverseQuantity) {
            object[] results = this.Invoke("PICK_ReverseGS", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        ReverseQuantity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_ReverseGS(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string ReverseQuantity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_ReverseGS", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        ReverseQuantity}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_ReverseGS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_ReverseGSAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string ReverseQuantity) {
            this.PICK_ReverseGSAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, PointOfUseID, OperationSequenceNumber, ItemNumber, ReverseQuantity, null);
        }
        
        /// <remarks/>
        public void PICK_ReverseGSAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string ReverseQuantity, object userState) {
            if ((this.PICK_ReverseGSOperationCompleted == null)) {
                this.PICK_ReverseGSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_ReverseGSOperationCompleted);
            }
            this.InvokeAsync("PICK_ReverseGS", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        ReverseQuantity}, this.PICK_ReverseGSOperationCompleted, userState);
        }
        
        private void OnPICK_ReverseGSOperationCompleted(object arg) {
            if ((this.PICK_ReverseGSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_ReverseGSCompleted(this, new PICK_ReverseGSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_ReverseLJ", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_ReverseLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string ReverseQuantity) {
            object[] results = this.Invoke("PICK_ReverseLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        ReverseQuantity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_ReverseLJ(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string ReverseQuantity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_ReverseLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        ReverseQuantity}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_ReverseLJ(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_ReverseLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string ReverseQuantity) {
            this.PICK_ReverseLJAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, PointOfUseID, OperationSequenceNumber, ItemNumber, Stockroom, Bin, ReverseQuantity, null);
        }
        
        /// <remarks/>
        public void PICK_ReverseLJAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string PointOfUseID, string OperationSequenceNumber, string ItemNumber, string Stockroom, string Bin, string ReverseQuantity, object userState) {
            if ((this.PICK_ReverseLJOperationCompleted == null)) {
                this.PICK_ReverseLJOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_ReverseLJOperationCompleted);
            }
            this.InvokeAsync("PICK_ReverseLJ", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ItemNumber,
                        Stockroom,
                        Bin,
                        ReverseQuantity}, this.PICK_ReverseLJOperationCompleted, userState);
        }
        
        private void OnPICK_ReverseLJOperationCompleted(object arg) {
            if ((this.PICK_ReverseLJCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_ReverseLJCompleted(this, new PICK_ReverseLJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_ADDText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_ADDText(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            object[] results = this.Invoke("PICK_ADDText", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_ADDText(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_ADDText", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_ADDText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_ADDTextAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4) {
            this.PICK_ADDTextAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, ComponentLineType, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, TextLine1, TextLine2, TextLine3, TextLine4, null);
        }
        
        /// <remarks/>
        public void PICK_ADDTextAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, string TextLine1, string TextLine2, string TextLine3, string TextLine4, object userState) {
            if ((this.PICK_ADDTextOperationCompleted == null)) {
                this.PICK_ADDTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_ADDTextOperationCompleted);
            }
            this.InvokeAsync("PICK_ADDText", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber,
                        TextLine1,
                        TextLine2,
                        TextLine3,
                        TextLine4}, this.PICK_ADDTextOperationCompleted, userState);
        }
        
        private void OnPICK_ADDTextOperationCompleted(object arg) {
            if ((this.PICK_ADDTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_ADDTextCompleted(this, new PICK_ADDTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PICK_DELText", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PICK_DELText(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber) {
            object[] results = this.Invoke("PICK_DELText", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPICK_DELText(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PICK_DELText", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPICK_DELText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PICK_DELTextAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber) {
            this.PICK_DELTextAsync(GUID, OrderType, IssueType, OrderNumber, LineNumber, ComponentLineType, PointOfUseID, OperationSequenceNumber, ComponentItemNumber, null);
        }
        
        /// <remarks/>
        public void PICK_DELTextAsync(string GUID, string OrderType, string IssueType, string OrderNumber, string LineNumber, string ComponentLineType, string PointOfUseID, string OperationSequenceNumber, string ComponentItemNumber, object userState) {
            if ((this.PICK_DELTextOperationCompleted == null)) {
                this.PICK_DELTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPICK_DELTextOperationCompleted);
            }
            this.InvokeAsync("PICK_DELText", new object[] {
                        GUID,
                        OrderType,
                        IssueType,
                        OrderNumber,
                        LineNumber,
                        ComponentLineType,
                        PointOfUseID,
                        OperationSequenceNumber,
                        ComponentItemNumber}, this.PICK_DELTextOperationCompleted, userState);
        }
        
        private void OnPICK_DELTextOperationCompleted(object arg) {
            if ((this.PICK_DELTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PICK_DELTextCompleted(this, new PICK_DELTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/GLOS_ADDHeader", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GLOS_ADDHeader(string GUID, string GLOrganizationGroup, string GLOrganizationGroupDescription, string ConsolidationGLOrganization) {
            object[] results = this.Invoke("GLOS_ADDHeader", new object[] {
                        GUID,
                        GLOrganizationGroup,
                        GLOrganizationGroupDescription,
                        ConsolidationGLOrganization});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGLOS_ADDHeader(string GUID, string GLOrganizationGroup, string GLOrganizationGroupDescription, string ConsolidationGLOrganization, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GLOS_ADDHeader", new object[] {
                        GUID,
                        GLOrganizationGroup,
                        GLOrganizationGroupDescription,
                        ConsolidationGLOrganization}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGLOS_ADDHeader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GLOS_ADDHeaderAsync(string GUID, string GLOrganizationGroup, string GLOrganizationGroupDescription, string ConsolidationGLOrganization) {
            this.GLOS_ADDHeaderAsync(GUID, GLOrganizationGroup, GLOrganizationGroupDescription, ConsolidationGLOrganization, null);
        }
        
        /// <remarks/>
        public void GLOS_ADDHeaderAsync(string GUID, string GLOrganizationGroup, string GLOrganizationGroupDescription, string ConsolidationGLOrganization, object userState) {
            if ((this.GLOS_ADDHeaderOperationCompleted == null)) {
                this.GLOS_ADDHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGLOS_ADDHeaderOperationCompleted);
            }
            this.InvokeAsync("GLOS_ADDHeader", new object[] {
                        GUID,
                        GLOrganizationGroup,
                        GLOrganizationGroupDescription,
                        ConsolidationGLOrganization}, this.GLOS_ADDHeaderOperationCompleted, userState);
        }
        
        private void OnGLOS_ADDHeaderOperationCompleted(object arg) {
            if ((this.GLOS_ADDHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GLOS_ADDHeaderCompleted(this, new GLOS_ADDHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/GLOS_ADDChild", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GLOS_ADDChild(string GUID, string ParentGLOrganization, string ChildGLOrganization, string GLOrganizationGroupDescription, string ConsolidationGLOrganization) {
            object[] results = this.Invoke("GLOS_ADDChild", new object[] {
                        GUID,
                        ParentGLOrganization,
                        ChildGLOrganization,
                        GLOrganizationGroupDescription,
                        ConsolidationGLOrganization});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGLOS_ADDChild(string GUID, string ParentGLOrganization, string ChildGLOrganization, string GLOrganizationGroupDescription, string ConsolidationGLOrganization, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GLOS_ADDChild", new object[] {
                        GUID,
                        ParentGLOrganization,
                        ChildGLOrganization,
                        GLOrganizationGroupDescription,
                        ConsolidationGLOrganization}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGLOS_ADDChild(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GLOS_ADDChildAsync(string GUID, string ParentGLOrganization, string ChildGLOrganization, string GLOrganizationGroupDescription, string ConsolidationGLOrganization) {
            this.GLOS_ADDChildAsync(GUID, ParentGLOrganization, ChildGLOrganization, GLOrganizationGroupDescription, ConsolidationGLOrganization, null);
        }
        
        /// <remarks/>
        public void GLOS_ADDChildAsync(string GUID, string ParentGLOrganization, string ChildGLOrganization, string GLOrganizationGroupDescription, string ConsolidationGLOrganization, object userState) {
            if ((this.GLOS_ADDChildOperationCompleted == null)) {
                this.GLOS_ADDChildOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGLOS_ADDChildOperationCompleted);
            }
            this.InvokeAsync("GLOS_ADDChild", new object[] {
                        GUID,
                        ParentGLOrganization,
                        ChildGLOrganization,
                        GLOrganizationGroupDescription,
                        ConsolidationGLOrganization}, this.GLOS_ADDChildOperationCompleted, userState);
        }
        
        private void OnGLOS_ADDChildOperationCompleted(object arg) {
            if ((this.GLOS_ADDChildCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GLOS_ADDChildCompleted(this, new GLOS_ADDChildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PORVRByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PORVRByLot(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate) {
            object[] results = this.Invoke("PORVRByLot", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate,
                        POReceiptDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPORVRByLot(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PORVRByLot", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate,
                        POReceiptDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPORVRByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PORVRByLotAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate) {
            this.PORVRByLotAsync(GUID, PONumber, POLineNumber, ItemNumber, ReceiptQuantity, Stockroom, Bin, InventoryCategory, PromisedDate, POReceiptDate, null);
        }
        
        /// <remarks/>
        public void PORVRByLotAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string PromisedDate, string POReceiptDate, object userState) {
            if ((this.PORVRByLotOperationCompleted == null)) {
                this.PORVRByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPORVRByLotOperationCompleted);
            }
            this.InvokeAsync("PORVRByLot", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        PromisedDate,
                        POReceiptDate}, this.PORVRByLotOperationCompleted, userState);
        }
        
        private void OnPORVRByLotOperationCompleted(object arg) {
            if ((this.PORVRByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PORVRByLotCompleted(this, new PORVRByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/PORVXByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PORVXByLot(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string PromisedDate) {
            object[] results = this.Invoke("PORVXByLot", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber,
                        PromisedDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPORVXByLot(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string PromisedDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PORVXByLot", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber,
                        PromisedDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPORVXByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PORVXByLotAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string PromisedDate) {
            this.PORVXByLotAsync(GUID, PONumber, POLineNumber, ItemNumber, RefQuantity, Stockroom, Bin, InventoryCategory, LotNumber, PromisedDate, null);
        }
        
        /// <remarks/>
        public void PORVXByLotAsync(string GUID, string PONumber, string POLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string PromisedDate, object userState) {
            if ((this.PORVXByLotOperationCompleted == null)) {
                this.PORVXByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPORVXByLotOperationCompleted);
            }
            this.InvokeAsync("PORVXByLot", new object[] {
                        GUID,
                        PONumber,
                        POLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber,
                        PromisedDate}, this.PORVXByLotOperationCompleted, userState);
        }
        
        private void OnPORVXByLotOperationCompleted(object arg) {
            if ((this.PORVXByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PORVXByLotCompleted(this, new PORVXByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MORVRByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MORVRByLot(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber) {
            object[] results = this.Invoke("MORVRByLot", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMORVRByLot(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MORVRByLot", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMORVRByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MORVRByLotAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber) {
            this.MORVRByLotAsync(GUID, MONumber, MOLineNumber, ItemNumber, ReceiptQuantity, Stockroom, Bin, InventoryCategory, LotNumber, null);
        }
        
        /// <remarks/>
        public void MORVRByLotAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string ReceiptQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, object userState) {
            if ((this.MORVRByLotOperationCompleted == null)) {
                this.MORVRByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMORVRByLotOperationCompleted);
            }
            this.InvokeAsync("MORVRByLot", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        ReceiptQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber}, this.MORVRByLotOperationCompleted, userState);
        }
        
        private void OnMORVRByLotOperationCompleted(object arg) {
            if ((this.MORVRByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MORVRByLotCompleted(this, new MORVRByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/MORVXByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MORVXByLot(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber) {
            object[] results = this.Invoke("MORVXByLot", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMORVXByLot(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MORVXByLot", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMORVXByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MORVXByLotAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber) {
            this.MORVXByLotAsync(GUID, MONumber, MOLineNumber, ItemNumber, RefQuantity, Stockroom, Bin, InventoryCategory, LotNumber, null);
        }
        
        /// <remarks/>
        public void MORVXByLotAsync(string GUID, string MONumber, string MOLineNumber, string ItemNumber, string RefQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, object userState) {
            if ((this.MORVXByLotOperationCompleted == null)) {
                this.MORVXByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMORVXByLotOperationCompleted);
            }
            this.InvokeAsync("MORVXByLot", new object[] {
                        GUID,
                        MONumber,
                        MOLineNumber,
                        ItemNumber,
                        RefQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber}, this.MORVXByLotOperationCompleted, userState);
        }
        
        private void OnMORVXByLotOperationCompleted(object arg) {
            if ((this.MORVXByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MORVXByLotCompleted(this, new MORVXByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/SHIPIByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SHIPIByLot(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber) {
            object[] results = this.Invoke("SHIPIByLot", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSHIPIByLot(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SHIPIByLot", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSHIPIByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SHIPIByLotAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber) {
            this.SHIPIByLotAsync(GUID, CONumber, COLineNumber, ShippedQuantity, Stockroom, Bin, InventoryCategory, LotNumber, null);
        }
        
        /// <remarks/>
        public void SHIPIByLotAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, object userState) {
            if ((this.SHIPIByLotOperationCompleted == null)) {
                this.SHIPIByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSHIPIByLotOperationCompleted);
            }
            this.InvokeAsync("SHIPIByLot", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber}, this.SHIPIByLotOperationCompleted, userState);
        }
        
        private void OnSHIPIByLotOperationCompleted(object arg) {
            if ((this.SHIPIByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SHIPIByLotCompleted(this, new SHIPIByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FSTMGUID/SHIPXByLot", RequestNamespace="http://FSTMGUID/", ResponseNamespace="http://FSTMGUID/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SHIPXByLot(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string ShipmentNumber) {
            object[] results = this.Invoke("SHIPXByLot", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber,
                        ShipmentNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSHIPXByLot(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string ShipmentNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SHIPXByLot", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber,
                        ShipmentNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSHIPXByLot(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SHIPXByLotAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string ShipmentNumber) {
            this.SHIPXByLotAsync(GUID, CONumber, COLineNumber, ShippedQuantity, Stockroom, Bin, InventoryCategory, LotNumber, ShipmentNumber, null);
        }
        
        /// <remarks/>
        public void SHIPXByLotAsync(string GUID, string CONumber, string COLineNumber, string ShippedQuantity, string Stockroom, string Bin, string InventoryCategory, string LotNumber, string ShipmentNumber, object userState) {
            if ((this.SHIPXByLotOperationCompleted == null)) {
                this.SHIPXByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSHIPXByLotOperationCompleted);
            }
            this.InvokeAsync("SHIPXByLot", new object[] {
                        GUID,
                        CONumber,
                        COLineNumber,
                        ShippedQuantity,
                        Stockroom,
                        Bin,
                        InventoryCategory,
                        LotNumber,
                        ShipmentNumber}, this.SHIPXByLotOperationCompleted, userState);
        }
        
        private void OnSHIPXByLotOperationCompleted(object arg) {
            if ((this.SHIPXByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SHIPXByLotCompleted(this, new SHIPXByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void IMTRByLotCompletedEventHandler(object sender, IMTRByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMTRByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMTRByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void INVAByLotCompletedEventHandler(object sender, INVAByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class INVAByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal INVAByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICKByLot_IssueLJCompletedEventHandler(object sender, PICKByLot_IssueLJCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICKByLot_IssueLJCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICKByLot_IssueLJCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICKByLot_ReverseLJCompletedEventHandler(object sender, PICKByLot_ReverseLJCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICKByLot_ReverseLJCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICKByLot_ReverseLJCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void logonCompletedEventHandler(object sender, logonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void logonPoolCompletedEventHandler(object sender, logonPoolCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logonPoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logonPoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void logoutCompletedEventHandler(object sender, logoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_ADDCompletedEventHandler(object sender, ITMB_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_ChangeCompletedEventHandler(object sender, ITMB_ChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_ChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_ChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_PlanParameterCompletedEventHandler(object sender, ITMB_PlanParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_PlanParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_PlanParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_EditDetailCompletedEventHandler(object sender, ITMB_EditDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_EditDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_EditDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_DEPTCompletedEventHandler(object sender, ITMB_DEPTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_DEPTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_DEPTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_REF4CompletedEventHandler(object sender, ITMB_REF4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_REF4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_REF4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_ADDTEXTCompletedEventHandler(object sender, ITMB_ADDTEXTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_ADDTEXTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_ADDTEXTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_DELTEXTCompletedEventHandler(object sender, ITMB_DELTEXTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_DELTEXTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_DELTEXTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMB_DefLotCompletedEventHandler(object sender, ITMB_DefLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMB_DefLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMB_DefLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMC_ADDCompletedEventHandler(object sender, ITMC_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMC_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMC_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMC_EDITCompletedEventHandler(object sender, ITMC_EDITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMC_EDITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMC_EDITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMC_DELCompletedEventHandler(object sender, ITMC_DELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMC_DELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMC_DELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ITMC_AccountCompletedEventHandler(object sender, ITMC_AccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ITMC_AccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ITMC_AccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_ADDHeaderCompletedEventHandler(object sender, MOMT_ADDHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_ADDHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_ADDHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_ADDLineCompletedEventHandler(object sender, MOMT_ADDLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_ADDLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_ADDLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_ADDHeaderTEXTCompletedEventHandler(object sender, MOMT_ADDHeaderTEXTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_ADDHeaderTEXTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_ADDHeaderTEXTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_DELHeaderTEXTCompletedEventHandler(object sender, MOMT_DELHeaderTEXTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_DELHeaderTEXTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_DELHeaderTEXTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_EditHeaderCompletedEventHandler(object sender, MOMT_EditHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_EditHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_EditHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_EditLineCompletedEventHandler(object sender, MOMT_EditLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_EditLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_EditLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_ADDLineTextCompletedEventHandler(object sender, MOMT_ADDLineTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_ADDLineTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_ADDLineTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MOMT_DELLineTextCompletedEventHandler(object sender, MOMT_DELLineTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOMT_DELLineTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOMT_DELLineTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_ADDHeaderCompletedEventHandler(object sender, POMT_ADDHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_ADDHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_ADDHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_ADDLineCompletedEventHandler(object sender, POMT_ADDLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_ADDLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_ADDLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_ADDPMLineCompletedEventHandler(object sender, POMT_ADDPMLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_ADDPMLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_ADDPMLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_EditPMLineDetailCompletedEventHandler(object sender, POMT_EditPMLineDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_EditPMLineDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_EditPMLineDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_EditLineCompletedEventHandler(object sender, POMT_EditLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_EditLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_EditLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_ADDLineTextCompletedEventHandler(object sender, POMT_ADDLineTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_ADDLineTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_ADDLineTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_DelLineCompletedEventHandler(object sender, POMT_DelLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_DelLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_DelLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void POMT_EditHeaderCompletedEventHandler(object sender, POMT_EditHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POMT_EditHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POMT_EditHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void COMT_ADDHeaderCompletedEventHandler(object sender, COMT_ADDHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class COMT_ADDHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal COMT_ADDHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void COMT_ADDLineCompletedEventHandler(object sender, COMT_ADDLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class COMT_ADDLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal COMT_ADDLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void COMT_EditLineCompletedEventHandler(object sender, COMT_EditLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class COMT_EditLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal COMT_EditLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void COMT_ADDLineTextCompletedEventHandler(object sender, COMT_ADDLineTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class COMT_ADDLineTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal COMT_ADDLineTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void COMT_DELLineTextCompletedEventHandler(object sender, COMT_DELLineTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class COMT_DELLineTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal COMT_DELLineTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MORVRCompletedEventHandler(object sender, MORVRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MORVRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MORVRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MORVXCompletedEventHandler(object sender, MORVXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MORVXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MORVXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PORVRCompletedEventHandler(object sender, PORVRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PORVRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PORVRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PORVXCompletedEventHandler(object sender, PORVXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PORVXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PORVXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PORVR_PMCompletedEventHandler(object sender, PORVR_PMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PORVR_PMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PORVR_PMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PORVX_PMCompletedEventHandler(object sender, PORVX_PMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PORVX_PMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PORVX_PMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void SHIPICompletedEventHandler(object sender, SHIPICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SHIPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SHIPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void SHIPXCompletedEventHandler(object sender, SHIPXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SHIPXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SHIPXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void IMTRCompletedEventHandler(object sender, IMTRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMTRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMTRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void INVACompletedEventHandler(object sender, INVACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class INVACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal INVACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void BILL_ADDCompletedEventHandler(object sender, BILL_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BILL_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BILL_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void BILL_EDITCompletedEventHandler(object sender, BILL_EDITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BILL_EDITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BILL_EDITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void BILL_DELCompletedEventHandler(object sender, BILL_DELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BILL_DELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BILL_DELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void BILL_ADDTEXTCompletedEventHandler(object sender, BILL_ADDTEXTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BILL_ADDTEXTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BILL_ADDTEXTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void BILL_DELTEXTCompletedEventHandler(object sender, BILL_DELTEXTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BILL_DELTEXTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BILL_DELTEXTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void TEXT_ADDCompletedEventHandler(object sender, TEXT_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TEXT_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TEXT_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void TEXT_EDITCompletedEventHandler(object sender, TEXT_EDITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TEXT_EDITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TEXT_EDITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void TEXT_DELCompletedEventHandler(object sender, TEXT_DELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TEXT_DELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TEXT_DELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void VEID_ADDCompletedEventHandler(object sender, VEID_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VEID_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VEID_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void VEID_EDITCompletedEventHandler(object sender, VEID_EDITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VEID_EDITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VEID_EDITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void VEID_EDITVATCompletedEventHandler(object sender, VEID_EDITVATCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VEID_EDITVATCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VEID_EDITVATCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void VEID_EDITDetailCompletedEventHandler(object sender, VEID_EDITDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VEID_EDITDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VEID_EDITDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void CUID_ADDCompletedEventHandler(object sender, CUID_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CUID_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CUID_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void CUID_EDITCompletedEventHandler(object sender, CUID_EDITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CUID_EDITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CUID_EDITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void CUID_EDITTaxCodeCompletedEventHandler(object sender, CUID_EDITTaxCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CUID_EDITTaxCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CUID_EDITTaxCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void LMMT_ADDCompletedEventHandler(object sender, LMMT_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMMT_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMMT_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void LMMT_EDITCompletedEventHandler(object sender, LMMT_EDITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMMT_EDITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMMT_EDITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void LMMT_DELCompletedEventHandler(object sender, LMMT_DELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LMMT_DELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LMMT_DELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_ADDCompletedEventHandler(object sender, PICK_ADDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_ADDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_ADDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_DELCompletedEventHandler(object sender, PICK_DELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_DELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_DELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_EDITDetailCompletedEventHandler(object sender, PICK_EDITDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_EDITDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_EDITDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_IssueLJCompletedEventHandler(object sender, PICK_IssueLJCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_IssueLJCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_IssueLJCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_IssueGSCompletedEventHandler(object sender, PICK_IssueGSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_IssueGSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_IssueGSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_ReverseGSCompletedEventHandler(object sender, PICK_ReverseGSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_ReverseGSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_ReverseGSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_ReverseLJCompletedEventHandler(object sender, PICK_ReverseLJCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_ReverseLJCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_ReverseLJCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_ADDTextCompletedEventHandler(object sender, PICK_ADDTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_ADDTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_ADDTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PICK_DELTextCompletedEventHandler(object sender, PICK_DELTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PICK_DELTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PICK_DELTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GLOS_ADDHeaderCompletedEventHandler(object sender, GLOS_ADDHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GLOS_ADDHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GLOS_ADDHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GLOS_ADDChildCompletedEventHandler(object sender, GLOS_ADDChildCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GLOS_ADDChildCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GLOS_ADDChildCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PORVRByLotCompletedEventHandler(object sender, PORVRByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PORVRByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PORVRByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void PORVXByLotCompletedEventHandler(object sender, PORVXByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PORVXByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PORVXByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MORVRByLotCompletedEventHandler(object sender, MORVRByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MORVRByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MORVRByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void MORVXByLotCompletedEventHandler(object sender, MORVXByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MORVXByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MORVXByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void SHIPIByLotCompletedEventHandler(object sender, SHIPIByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SHIPIByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SHIPIByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void SHIPXByLotCompletedEventHandler(object sender, SHIPXByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SHIPXByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SHIPXByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
